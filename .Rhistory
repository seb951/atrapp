#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
trimmed = read.table("../results/summary_stats/trimmed",stringsAsFactors = F)
trimmed[,9] = sub("%","",trimmed[,9],fixed=T)
trimmed[,9] = sub("(","",trimmed[,9],fixed=T)
trimmed[,9] = sub(")","",trimmed[,9],fixed=T)
hist(as.numeric(trimmed[,9]),xlab = "% dropped",main= "Trimmomatic")
paste(signif(mean(as.numeric(trimmed[,9])),4)," % of sequences were dropped",sep = "")
pe_assembly = read.table("../results/summary_stats/pe_assembly",stringsAsFactors = F)
pe_assembly[,7] = sub("%","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub("(","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub(")","",pe_assembly[,7],fixed=T)
hist(as.numeric(pe_assembly[,7]),xlab = "% merged",main= "merging PE")
paste(signif(mean(as.numeric(pe_assembly[,7])),4)," % of sequences were trimmed",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
dim(ribosoemes)
dim(ribosomes)
head(ribosomes)
(ribosomes[,6:9])
ribosomes[ribosomes[,9]>50,]
ribosomes[,9]>50
ribosomes[,9]
as.numeric(ribosomes[,9])>50
ribosomes[as.numeric(ribosomes[,9])>50,]
trimmed
head(trimmed)
ribosomes[as.numeric(ribosomes[,9])>50,]
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50[,1]
strsplit(min50[,1]),"_"_
strsplit(min50[,1]),"_")
strsplit(min50[,1],"_")
unlist(strsplit(min50[,1],"_"))
strsplit(min50[,1],"/")
unlist(strsplit(min50[,1],"/"))
unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50_n
min50_n = unlist(strsplit(min50[,1],"_merg"))[c(1,3,5)]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50_names = unlist(strsplit(min50_n[,1],"_merg"))[c(1,3,5)]
min50_names = unlist(strsplit(min50_n[,1],"_merg"))
min50_names = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50_names
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n[,1],"_merg"))
min50
min50
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n[,1],"_merg"))
unlist(strsplit(min50_n,"_merg"))
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50[,1]
min50
min50[,c(1,9)]
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50[,c(1,9)]
library(maps)
?maps
35*15*20
10500/100
10500/1000
35*20*20 / 1000
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
vignette(dada2)
library(dada2)
vignette(dada2)
vignette("dada2")
?vignette
dada2
version(dada2)
updateR(admin_password = '12coregon')
update(dada2)
update("dada2")
source("https://bioconductor.org/biocLite.R") # Installs Bionconductor
biocLite("dada2") # Installs DADA2
source("https://bioconductor.org/biocLite.R") # Installs Bionconductor
biocLite("dada2")
library(dada2)
biocLite("phyloseq")
library(phyloseq)
library(dada2)
browseVignettes("dada2")
setClass("Person", representation(name = "character", age = "numeric"))
setClass("Employee", representation(boss = "Person"), contains = "Person")
Neo <- new("Person", name="Neo", age = 31)
Neo
str(neo)
str(Neo)
?learnErrors
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/MiSeq_SOP"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master//Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
path = "Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
fnRs
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
sample.names
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
dev.off()
dev.off()
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
?plotQualityProfile
errF <- learnErrors(filtFs, multithread=TRUE)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
fnFs
filtFs
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
sample.names
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample."), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample."), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs[[1]]
dadaFs
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
dim(mergers)
dim(mergers[[1]])
mergers
?mergePairs
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
seqtab
dim(seqtab)
path
paste(path,"/fichier1")
paste(path,"/fichier1",sep = "")
paste(path,"/fichier1",sep = "q")
paste(path,"/fichier1",sep = "@")
paste(path,"/fichier1",sep = "")
system("mkdir dossier")
getwd()
source("https://bioconductor.org/biocLite.R")
biocLite("ShortRead")
setwd("/Users/jerry/Dropbox/CSBQ/shapiro")
#packages
library(pals)
library(ggplot2)
library(gridExtra)
library(vegan)
library(ape)
library(lubridate)
system("ls -1 results/org_results/*RefSeq_annot_organism.tsv >all.tsv")
all.tsv = read.table("all.tsv", stringsAsFactors = F)
all_spp = NULL
all_spp_shortnames = NULL
all_spp_five = NULL
#first loop is to subset the major species (over 1%)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
all_spp = c(all_spp,refseq.all[1:100,3]) #keep only top 10
all_spp_five = c(all_spp_five,refseq.all[refseq.all[,1]>1,3]) #keep only the ones that are at more than 1% in at least one sample
}
all_spp_five_m = unique(sort(all_spp_five))
all_spp_m = data.frame(unique(sort(all_spp)),stringsAsFactors = F)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,3] == all_spp_m[j,1],1]
if(length(temp) == 1) all_spp_m[j,i+1] = temp
if(length(temp) == 0) all_spp_m[j,i+1] = 0
}
#get a proper shortname for the graph
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
colnames(all_spp_m)[i+1] = paste(location,date,replicate,sep = "_")
colnames(all_spp_m)[1] = "species"
all_spp_shortnames = c(all_spp_shortnames,rep(paste(date,location,replicate,sep = "_"),nrow(all_spp_m)))
}
#standardization using hellinger transform
#asv.filt.abundants.norm.hel <-decostand(asv.filt.abundants.norm, "hel")
#PERMANOVA
#The only assumption of PERMANOVA is independence of samples (I think, but could be wrong here)
#permanova = adonis(formula=asv.filt.abundants.norm.hel~fertilization*species,strata=(design.keep$bloc/design.keep$replicate), data=design.keep, permutations=9999, method="bray")
#permanova$aov.tab$comparison = "root_fungi"
#all_spp_m = all_spp_m[,-c(6:8)]
all_spp_m.pcoa = data.frame(all_spp_m[,-1])
rownames(all_spp_m.pcoa) = all_spp_m[,1]
#transpose
all_spp_m.pcoa=t(all_spp_m.pcoa)
#standardize
all_spp_m.pcoa.hel <-decostand(all_spp_m.pcoa, "hel")
#dissimilarity
all_spp_m.pcoa.hel.bray <-vegdist(all_spp_m.pcoa.hel, method="bray")
#Calculating PCoA
all_spp_m.pcoa.hel.bray.pcoa<-pcoa(dist(all_spp_m.pcoa.hel.bray))
#How many axes represent more variability (17)
bs = all_spp_m.pcoa.hel.bray.pcoa$values$Broken_stick
length(bs[bs>mean(bs)])
#PVE of first 2 axes (4.7% & 3.8%)
axis.1.2 = round((all_spp_m.pcoa.hel.bray.pcoa$values$Broken_stick/sum(all_spp_m.pcoa.hel.bray.pcoa$values$Broken_stick))[1:2],4)*100
#Ploting the PCoAs - with fertilization as empty circles
#crops are "darkred","darkblue","darkorange
pcoa.plot = data.frame(all_spp_m.pcoa.hel.bray.pcoa$vectors[,1:2])
pcoa.plot[regexpr("St1",rownames(pcoa.plot))>0,3] = "St1" #circle
pcoa.plot[regexpr("PRM",rownames(pcoa.plot))>0,3] = "PRM" #triangle
pcoa.plot[regexpr("St2",rownames(pcoa.plot))>0,3] = "St2" #square
date = (unlist(strsplit(rownames(pcoa.plot),split = "_"))[seq(2,195,by =3)])
pcoa.plot[,4] = ymd(date)
colnames(pcoa.plot) = c("axis1","axis2","Sampling","date")
p1=ggplot(pcoa.plot,aes(axis1,axis2)) +
labs(title = "Lake Champlain - PcoA (temporary data: present at 1%)",shape = "Sampling Site", colour = "Sampling Date") +
geom_point(aes(colour=as.factor(date),shape = factor(Sampling)),stroke = 3) +
scale_shape(solid = F) +
theme(plot.title = element_text(hjust = 0.5, size=10, face="bold")) +
ylab("Axis 2") + xlab("Axis 1") +
scale_color_brewer(palette= "Spectral") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#
dev.new()
dev.new()
p1
dev.print(device=pdf, "figures/Champlain_pcoa.pdf", onefile=FALSE)
dev.off()
p1=ggplot(pcoa.plot,aes(axis1,axis2)) +
labs(title = "Lake Champlain - PcoA (temporary data: present at 1%)",shape = "Sampling Site", colour = "Sampling Date") +
geom_point(aes(colour=as.factor(date),shape = factor(Sampling)),stroke = 3) +
scale_shape(solid = F) +
theme(plot.title = element_text(hjust = 0.5, size=10, face="bold")) +
ylab("Axis 2") + xlab("Axis 1") +
scale_color_brewer(palette= "Spectral")
#
dev.new()
p1
dev.print(device=pdf, "figures/Champlain_pcoa.pdf", onefile=FALSE)
dev.off()
p1=ggplot(pcoa.plot,aes(axis1,axis2)) +
labs(title = "Lake Champlain - PcoA (temporary data: present at 1%)",shape = "Sampling Site", colour = "Sampling Date") +
geom_point(aes(colour=as.factor(date),shape = factor(Sampling))) +
scale_shape(solid = F) +
theme(plot.title = element_text(hjust = 0.5, size=10, face="bold")) +
ylab("Axis 2") + xlab("Axis 1") +
scale_color_brewer(palette= "Spectral")
#
dev.new()
p1
dev.print(device=pdf, "figures/Champlain_pcoa.pdf", onefile=FALSE)
dev.off()
p1=ggplot(pcoa.plot,aes(axis1,axis2)) +
labs(title = "Lake Champlain - PcoA (temp. sps, present at >1%)",shape = "Sampling Site", colour = "Sampling Date") +
geom_point(aes(colour=as.factor(date),shape = factor(Sampling))) +
scale_shape(solid = F) +
ylab("Axis 2") + xlab("Axis 1") +
scale_color_brewer(palette= "Spectral")
#
dev.new()
p1
dev.print(device=pdf, "figures/Champlain_pcoa.pdf", onefile=FALSE)
dev.off()
p1=ggplot(pcoa.plot,aes(axis1,axis2)) +
labs(title = "Lake Champlain - PcoA (temp. sps, present at >1%)",shape = "Sampling Site", colour = "Sampling Date") +
geom_point(aes(colour=as.factor(date),shape = factor(Sampling)),stroke=3) +
scale_shape(solid = F) +
ylab("Axis 2") + xlab("Axis 1") +
scale_color_brewer(palette= "Spectral")
#
dev.new()
p1
dev.print(device=pdf, "figures/Champlain_pcoa.pdf", onefile=FALSE)
dev.off()
axis.1.2
paste("Axis 2 (",axis.1.2[2],")",sep = ""))
paste("Axis 2 (",axis.1.2[2],")",sep = "")
paste("Axis 2 (PVE:",axis.1.2[2],")",sep = "")
p1=ggplot(pcoa.plot,aes(axis1,axis2)) +
labs(title = "Lake Champlain - PcoA (temp. sps, present at >1%)",shape = "Sampling Site", colour = "Sampling Date") +
geom_point(aes(colour=as.factor(date),shape = factor(Sampling)),stroke=3) +
scale_shape(solid = F) +
ylab(paste("Axis 2 (PVE:",axis.1.2[2],")",sep = "")) + xlab(paste("Axis 1 (PVE:",axis.1.2[1],")",sep = "")) +
scale_color_brewer(palette= "Spectral")
#
dev.new()
p1
dev.print(device=pdf, "figures/Champlain_pcoa.pdf", onefile=FALSE)
dev.off()

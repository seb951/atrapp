nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
dim(ribosoemes)
dim(ribosomes)
head(ribosomes)
(ribosomes[,6:9])
ribosomes[ribosomes[,9]>50,]
ribosomes[,9]>50
ribosomes[,9]
as.numeric(ribosomes[,9])>50
ribosomes[as.numeric(ribosomes[,9])>50,]
trimmed
head(trimmed)
ribosomes[as.numeric(ribosomes[,9])>50,]
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50[,1]
strsplit(min50[,1]),"_"_
strsplit(min50[,1]),"_")
strsplit(min50[,1],"_")
unlist(strsplit(min50[,1],"_"))
strsplit(min50[,1],"/")
unlist(strsplit(min50[,1],"/"))
unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50_n
min50_n = unlist(strsplit(min50[,1],"_merg"))[c(1,3,5)]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50_names = unlist(strsplit(min50_n[,1],"_merg"))[c(1,3,5)]
min50_names = unlist(strsplit(min50_n[,1],"_merg"))
min50_names = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50_names
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n[,1],"_merg"))
min50
min50
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n[,1],"_merg"))
unlist(strsplit(min50_n,"_merg"))
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50[,1]
min50
min50[,c(1,9)]
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50[,c(1,9)]
library(maps)
?maps
35*15*20
10500/100
10500/1000
35*20*20 / 1000
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
vignette(dada2)
library(dada2)
vignette(dada2)
vignette("dada2")
?vignette
dada2
version(dada2)
updateR(admin_password = '12coregon')
update(dada2)
update("dada2")
source("https://bioconductor.org/biocLite.R") # Installs Bionconductor
biocLite("dada2") # Installs DADA2
source("https://bioconductor.org/biocLite.R") # Installs Bionconductor
biocLite("dada2")
library(dada2)
biocLite("phyloseq")
library(phyloseq)
library(dada2)
browseVignettes("dada2")
setClass("Person", representation(name = "character", age = "numeric"))
setClass("Employee", representation(boss = "Person"), contains = "Person")
Neo <- new("Person", name="Neo", age = 31)
Neo
str(neo)
str(Neo)
?learnErrors
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/MiSeq_SOP"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master//Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
path = "Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
fnRs
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
sample.names
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
dev.off()
dev.off()
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
?plotQualityProfile
errF <- learnErrors(filtFs, multithread=TRUE)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
fnFs
filtFs
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
sample.names
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample."), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample."), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs[[1]]
dadaFs
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
dim(mergers)
dim(mergers[[1]])
mergers
?mergePairs
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
seqtab
dim(seqtab)
path
paste(path,"/fichier1")
paste(path,"/fichier1",sep = "")
paste(path,"/fichier1",sep = "q")
paste(path,"/fichier1",sep = "@")
paste(path,"/fichier1",sep = "")
system("mkdir dossier")
getwd()
source("https://bioconductor.org/biocLite.R")
biocLite("ShortRead")
setwd("/Users/jerry/Dropbox/CSBQ/shapiro")
library(lubridate)
#load env. data
env = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v1seb.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",skip = 1)
header  = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v1seb.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",nrows = 1)
env = env[,1:91]
colnames(env) = header[1,1:91]
env[,4] = mdy(paste(env[,4]," 2016"))
dev.new(width=7, height=7,noRStudioGD = TRUE)
par(mfrow = c(3,1))
#N (mg N/L)
plot(env[env[,3]=="station1",c(4,6)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",6])*1.1))
#points(env[env[,3]=="station1",c(4,6)],type = "l",col = "black",pch =20)
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#text(env[40,4]-15,env[40,6],env[40,4],xpd = T,col="darkblue")
#P (µg P/L)
plot(env[env[,3]=="station1",c(4,21)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",21])*1.1))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,21)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,env[40,21],env[40,4],xpd = T,col="darkblue")
#Chlorophyll (filtration; ug/L)
plot(env[env[,3]=="station1",c(4,27)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,600))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,27)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,as.numeric(env[40,27]),env[40,4],xpd = T,col="darkblue")
setwd("/Users/jerry/Documents/CSBQ/shapiro")
library(lubridate)
#load env. data
env = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v1seb.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",skip = 1)
header  = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v1seb.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",nrows = 1)
env = env[,1:91]
colnames(env) = header[1,1:91]
env[,4] = mdy(paste(env[,4]," 2016"))
dev.new(width=7, height=7,noRStudioGD = TRUE)
par(mfrow = c(3,1))
#N (mg N/L)
plot(env[env[,3]=="station1",c(4,6)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",6])*1.1))
#points(env[env[,3]=="station1",c(4,6)],type = "l",col = "black",pch =20)
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#text(env[40,4]-15,env[40,6],env[40,4],xpd = T,col="darkblue")
#P (µg P/L)
plot(env[env[,3]=="station1",c(4,21)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",21])*1.1))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,21)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,env[40,21],env[40,4],xpd = T,col="darkblue")
#Chlorophyll (filtration; ug/L)
plot(env[env[,3]=="station1",c(4,27)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,600))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,27)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,as.numeric(env[40,27]),env[40,4],xpd = T,col="darkblue")
dev.new(width=7, height=7,noRStudioGD = TRUE)
par(mfrow = c(3,1))
#N (mg N/L)
plot(env[env[,3]=="station1",c(4,6)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",6])*1.1))
env[env[,3]=="station1",c(4,6)]
x = env[env[,3]=="station1",c(4)]
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#text(env[40,4]-15,env[40,6],env[40,4],xpd = T,col="darkblue")
dev.new(width=7, height=7,noRStudioGD = TRUE)
par(mfrow = c(3,1))
#N (mg N/L)
plot(env[env[,3]=="station1",c(4,6)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",6])*1.1))
#points(env[env[,3]=="station1",c(4,6)],type = "l",col = "black",pch =20)
x = env[env[,3]=="station1",c(4)]
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#text(env[40,4]-15,env[40,6],env[40,4],xpd = T,col="darkblue")
#P (µg P/L)
plot(env[env[,3]=="station1",c(4,21)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",21])*1.1))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,21)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,env[40,21],env[40,4],xpd = T,col="darkblue")
#Chlorophyll (filtration; ug/L)
plot(env[env[,3]=="station1",c(4,27)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,600))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,27)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,as.numeric(env[40,27]),env[40,4],xpd = T,col="darkblue")
dev.off()
dev.new(width=7, height=7,noRStudioGD = TRUE)
par(mfrow = c(3,1))
#N (mg N/L)
plot(env[env[,3]=="station1",c(4,6)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",6])*1.1))
#points(env[env[,3]=="station1",c(4,6)],type = "l",col = "black",pch =20)
x = env[env[,3]=="station1",c(4)]
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#text(env[40,4]-15,env[40,6],env[40,4],xpd = T,col="darkblue")
plot(env[env[,3]=="station1",c(4,21)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",21])*1.1))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,21)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,env[40,21],env[40,4],xpd = T,col="darkblue")
#Chlorophyll (filtration; ug/L)
plot(env[env[,3]=="station1",c(4,27)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,600))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,27)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,as.numeric(env[40,27]),env[40,4],xpd = T,col="darkblue")
#PDF
dev.print(device=pdf, "figures/env_data.pdf", onefile=FALSE)
png("figures/env_data.png",width=7, res =400,height=7,units= 'in')
dev.off()
dev.off()
for(graph in c("pdf", "png"))
{
dev.new(width=7, height=7,noRStudioGD = TRUE)
par(mfrow = c(3,1))
#N (mg N/L)
plot(env[env[,3]=="station1",c(4,6)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",6])*1.1))
#points(env[env[,3]=="station1",c(4,6)],type = "l",col = "black",pch =20)
x = env[env[,3]=="station1",c(4)]
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#text(env[40,4]-15,env[40,6],env[40,4],xpd = T,col="darkblue")
#P (µg P/L)
plot(env[env[,3]=="station1",c(4,21)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",21])*1.1))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,21)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,env[40,21],env[40,4],xpd = T,col="darkblue")
#Chlorophyll (filtration; ug/L)
plot(env[env[,3]=="station1",c(4,27)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,600))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,27)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,as.numeric(env[40,27]),env[40,4],xpd = T,col="darkblue")
#PDF
if(graph == "pdf")
{
dev.print(device=pdf, "figures/environmental_data.pdf", onefile=FALSE)
dev.off()
}
#PNG
if(graph == "png")
{
png("figures/environmental_data.png",width=7, res =400,height=7,units= 'in')
p1
dev.off()
}
}
for(graph in c("pdf", "png"))
{
if(graph == "pdf") { dev.new(width=7, height=7,noRStudioGD = TRUE) }
if(graph == "png") { png("figures/environmental_data.png",width=7, res =400,height=7,units= 'in') }
par(mfrow = c(3,1))
#N (mg N/L)
plot(env[env[,3]=="station1",c(4,6)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",6])*1.1))
#points(env[env[,3]=="station1",c(4,6)],type = "l",col = "black",pch =20)
x = env[env[,3]=="station1",c(4)]
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#text(env[40,4]-15,env[40,6],env[40,4],xpd = T,col="darkblue")
#P (µg P/L)
plot(env[env[,3]=="station1",c(4,21)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,max(env[env[,3]=="station1",21])*1.1))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,21)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,env[40,21],env[40,4],xpd = T,col="darkblue")
#Chlorophyll (filtration; ug/L)
plot(env[env[,3]=="station1",c(4,27)],type = "p",col = "darkblue",pch =20,cex =2,
ylim = c(0,600))
axis(3,at=x,labels=x,cex.axis=0.8,las=2,tick=F,line=-7)
#points(env[env[,3]=="station1",c(4,27)],type = "l",col = "black",pch =20)
#text(env[40,4]-15,as.numeric(env[40,27]),env[40,4],xpd = T,col="darkblue")
#PDF
if(graph == "pdf")  {  dev.print(device=pdf, "figures/environmental_data.pdf", onefile=FALSE)  }
dev.off()
}

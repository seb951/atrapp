results_data$Papers = log(as.numeric(results_data$Papers))
###
cor.test(results_data[,2],as.numeric(results_data[,3]),na.rm = T)
#plot(results_data[,1]*1000,log(as.numeric(results_data[,2])),ylab = "Impact Factor",xlab = "Publication cost in USD")
p1=ggplot() + labs(title = "Cost of Impact Factor") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
geom_point(aes(y = IF, x = Cost,size = Papers,colour = Publisher),
data = results_data,stat="identity") + xlab("Cost in USD")  +  ylab("Impact Factor")
#PDF (dimensions in inches)
dev.new(width=10, height=5,noRStudioGD = TRUE)
p1 + facet_grid(col= vars(Publisher),scales="free_x")
results_data = results_data[!is.na(results_data[,2]),]
results_data = results_data[!is.na(results_data[,3]),]
results_data = results_data[!is.na(results_data[,4]),]
results_data = results_data[results_data[,2] != 0,]
results_data = results_data[results_data[,3] != 0,]
results_data = results_data[results_data[,4] != 0,]
results_data$Publisher = as.character(results_data$Publisher )
results_data$Cost = log(as.numeric(results_data$Cost),10)
results_data$IF = log(as.numeric(results_data$IF),10)
results_data$Papers = log(as.numeric(results_data$Papers),10)
cor.test(results_data[,2],as.numeric(results_data[,3]),na.rm = T)
#plot(results_data[,1]*1000,log(as.numeric(results_data[,2])),ylab = "Impact Factor",xlab = "Publication cost in USD")
p1=ggplot() + labs(title = "Cost of Impact Factor") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
geom_point(aes(y = IF, x = Cost,size = Papers,colour = Publisher),
data = results_data,stat="identity") + xlab("Cost in USD")  +  ylab("Impact Factor")
#PDF (dimensions in inches)
dev.new(width=10, height=5,noRStudioGD = TRUE)
p1 + facet_grid(col= vars(Publisher),scales="free_x")
results_data = results[results[,3]!=0,]
results_data = results_data[!is.na(results_data[,2]),]
results_data = results_data[!is.na(results_data[,3]),]
results_data = results_data[!is.na(results_data[,4]),]
results_data = results_data[results_data[,2] != 0,]
results_data = results_data[results_data[,3] != 0,]
results_data = results_data[results_data[,4] != 0,]
results_data$Publisher = as.character(results_data$Publisher )
results_data$Cost = log(as.numeric(results_data$Cost),10)
results_data$IF = log(as.numeric(results_data$IF),10)
results_data$Papers = log(as.numeric(results_data$Papers),10)
cor.test(results_data[,2],as.numeric(results_data[,3]),na.rm = T)
#plot(results_data[,1]*1000,log(as.numeric(results_data[,2])),ylab = "Impact Factor",xlab = "Publication cost in USD")
p1=ggplot() + labs(title = "Cost of Impact Factor") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
geom_point(aes(y = IF, x = Cost,size = Papers,colour = Publisher),
data = results_data,stat="identity") + xlab("Cost in USD")  +  ylab("Impact Factor")
#PDF (dimensions in inches)
dev.new(width=10, height=5,noRStudioGD = TRUE)
p1 + facet_grid(col= vars(Publisher),scales="free_x")
library(radix)
library(leaflet)
?leaflet
install.packages("radix")
install.packages("radix")
library(radix)
?leaflet
library(radix)
?leaflet
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lng=174.768, lat=-36.852,popup="The birthplace of R")
library(leaflet)
getwd()
library(edger)
library(edgeR)
BiocManager::install("edgeR", version = "3.8")
library(edgeR)
?p.adjust
require(graphics)
set.seed(123)
x <- rnorm(50, mean = c(rep(0, 25), rep(3, 25)))
p <- 2*pnorm(sort(-abs(x)))
round(p, 3)
round(p.adjust(p), 3)
round(p.adjust(p, "BH"), 3)
hist(p)
hist(p.adjust())
hist(p.adjust(p))
hist(p)
hist(p,breaks = 100)
hist(p.adjust(p),100)
hist(p.adjust(p,"BH"),100)
hist(p.adjust(p,"b"),100)
hist(p.adjust(p,"BH"),100)
hist(p.adjust(p,"BH"),100)
hist(qvalue(p,"BH"),100)
library(qvalue)
hist(qvalue(p,"BH"),100)
hist(qvalue(p),100)
q = qvalue(p)
min(p)
x <- rnorm(1000, mean = c(rep(0, 25), rep(3, 25)))
p <- 2*pnorm(sort(-abs(x)))
hist(p)
min(p)
max(p)
hist(qvalue(p),100)
q =(qvalue(p))
str(q)
hist(q$qvalues,100)
hist(p.adjust(p,"BH"),100)
hist(p.adjust(p,"b"),100)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
x = rexp(1000)
min(x)
max(x)
hist(x)
#Running some R code.
x = rexp(1000)
min(x)
#Running some R code.
x = rexp(1000)
min(x)
max(x)
hist(x)
c(c('25%', '25%'),c('25%', '25%'))
rbind(c('25%', '25%'),c('25%', '25%'))
getwd()
7340-119
700*0.2
170000 + 20 000
170000 + 20000
?read.table
14.4+6.9+8.7+3.5
?points()
data = x(1:10)
data = c(1:10)
boxplot(data)
points(jitter(data))
jitter(data)
points(1,data)
points(rep(1,10),data)
points(jitter(rep(1,10)),data)
setwd("~/Desktop/")
grep = "grep -v '^\-\-$' test"
grep = paste("grep -v '^\-\-$'"," test",sep = "")
grep = paste("grep -v '^\\-\\-$'"," test",sep = "")
grep
system(grep)
getwd()
setwd("~/")
system(grep)
bowtie2_align = paste("bowtie2 -p 2 -x sequences/reference sequences/",ribo_out,"  >sequences/",bowtie_out,sep = "")
x = jitter(1,1,1,2,2,2,3,3,3)
x = jitter(c(1,1,1,2,2,2,3,3,3))
x
y = c(rep("h",3),rep("y",3),rep(z,3))
spe = c(rep("h",3),rep("y",3),rep("z",3))
spe
sex = c("F","M","M","M","M","M","M","F","F")
sex
seq = c("o","n","b","o","n","n","n","n","o")
seq
all = data.frame(x,spe,sex,seq)
all
anova(lm(sex~spe,data=all)
)
str(all)
anova(lm(x~spe,data=all))
anova(lm(x~spe+sex,data=all))
anova(lm(x~spe+sex+seq,data=all))
anova(lm(x~spe+sex+seq,data=all))
anova(lm(x~spe+sex*seq,data=all))
anova(lm(x~spe*sex*seq,data=all))
all
anova(lm(x~spe,data=all))
anova(lm(x~sex,data=all))
getwd()
install.packages("pagedown")
#' @examples
library(posterdown)
devtools::install_github("brentthorne/posterdown")
?posterdown
citation()
getwd()
var1 = 1
var2 = 3
if var1 > var2:
print("This is also True")
else:
print("ouin ouin")
var1
var2
var2 = 3
if var1 > var2:
print("This is also True")
if var1 > var2:
print("This is also True")
else:
print("That was False!")
if 2 > 1:
var1 = 1
var2 = 3
if var1 > var2:
print("That's ok")
elif 1 <= var2 <= 5:
print("I'd still pay that...")
else:
print("ouin ouin")
var1 = 1
var2 = 3
if var1 > var2:
print("That's ok")
elif 1 <= var2 <= 5:
print("I'd still pay that...")
else:
print("ouin ouin")
value = raw_input("How much is that doggy in the window? ")
value = int(value)
if value < 10:
print("That's a great deal!")
elif 10 <= value <= 20:
print("I'd still pay that...")
else:
print("Wow! That's too much!")
reticulate::repl_python()
plot(1,1)
x=1
x
setwd("/Users/jerry/Documents/CSBQ/shapiro")
source("Rcode/factory.R")
library(vcfR)
library(qvalue)
library(lubridate)
library(ggplot2)
library(gridExtra)
#load vcf and reference
vcf <- read.vcfR("results/dolicho/dolicho_full_trinity_transcriptome.vcf")
dna <- ape::read.dna("results/dolicho/Trinity_longest.fasta", format = "fasta")
#simplify names of files
samples = unlist(lapply(strsplit(colnames(vcf@gt)[-1],split = "_"), `[[`, 4))
samples = paste(samples,unlist(lapply(strsplit(colnames(vcf@gt)[-1],split = "_"), `[[`, 5)),sep = "-")
samples = gsub("Champ","",samples)
samples = gsub("-WatPhotz-RNA","",samples)
colnames(vcf@gt)[-1] = samples
#get data into a genotype matrix
vcf_genotype = as.data.frame(vcf@gt[,-1],stringsAsFactors = F)
vcf_genotype$chrom = vcf@fix[,1]
vcf_genotype$ref = vcf@fix[,4]
vcf_genotype$alt = vcf@fix[,5]
vcf_genotype$pos = vcf@fix[,2]
#filter to remove homopolymers / microsats
vcf_genotype = vcf_genotype[nchar(vcf_genotype[,67])==1,]
#allleles and fractions
minor = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
major = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
fraction = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
for(j in 1:(ncol(vcf@gt)-1))
{
vcf_genotype[,j] = unlist(lapply(strsplit(vcf_genotype[,j],split = ":"), `[[`, 3))
temp_ref = as.numeric(unlist(lapply(strsplit(vcf_genotype[,j],split = ","), `[[`, 1)))
temp_alt = as.numeric(unlist(lapply(strsplit(vcf_genotype[,j],split = ","), `[[`, 2)))
major[,j] = temp_ref
minor[,j] = temp_alt
fraction[,j] = temp_ref / (temp_ref+temp_alt)
}
###
###create a filter to remove too much misssing (50%)
###
filter = rep(0,nrow(fraction))
missing = length(samples)*0.5
maf = rep(0,nrow(fraction))
for(f in 1:length(filter))
{
if(length(c(1:length(samples))[is.na(fraction[f,])==F])>missing) filter[f] = 1
maf[f] = sum(minor[f,]) / c(sum(minor[f,]) + sum(major[f,]))
if(f %% 10000 == 0) print(paste(f," of ",length(filter)," The time is: ",Sys.time(),sep = ""))
}
###
#MAF and minor allele frequencies, Fraction of MAF and mAF
###
major_filt = major[filter ==1,]
minor_filt = minor[filter ==1,]
maf_filt = maf[filter ==1]
fraction_filt = fraction[filter ==1,]
vcf_genotype_filter = vcf_genotype[filter ==1,]
dim(vcf_genotype_filter)
#MAF filter
#I'd rather keep everything, bad SNP will get trown out during the logistic regression (pval=1)
#and removed from the qvalue correction so as not to skew the pvalue distribution on which the qvalue correction is based...
major_filt = major_filt[(maf_filt >0.05) & (maf_filt <0.95),]
minor_filt = minor_filt[(maf_filt >0.05) & (maf_filt <0.95),]
fraction_filt = fraction_filt[(maf_filt >0.05) & (maf_filt <0.95),]
vcf_genotype_filter = vcf_genotype_filter[(maf_filt >0.05) & (maf_filt <0.95),]
maf_filt = maf_filt[(maf_filt >0.05) & (maf_filt <0.95)]
dim(vcf_genotype)
dim(vcf_genotype_filter)
#MAF filter not applied:
#I'd rather keep everything, bad SNP will get trown out during the logistic regression (pval=1)
#and removed from the qvalue correction so as not to skew the pvalue distribution on which the qvalue correction is based...
#date start on 06-01, then +1 day each day...
dates_temp = colnames(vcf_genotype_filter)[1:65]
dates_temp = gsub("^....","",dates_temp)
dates_temp = ymd(as.numeric(gsub(".$","",dates_temp)))
dates_intervals = rep(0,65)
for(d in 2:65)
{
x = interval(dates_temp[1],dates_temp[d])
dates_intervals[d] = x %/% days(1)
}
#store scalar values
scalar_list = list()
#split experiment in 3 site_locations
for(a in 1:3)
{
site_location = c("St1","St2","PRM")[a]
vcf_genotype_filter_site_location = vcf_genotype_filter[,regexpr(site_location,colnames(vcf_genotype))>0]
major_site_location =  major_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
minor_site_location = minor_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
fraction_site_location = fraction_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
samples_site_location = samples[regexpr(site_location,samples)>0]
#How many unique contigs have SNPs that I can analyse?
length(unique(sort(vcf_genotype_filter_site_location$chrom)))
dim(vcf_genotype_filter_site_location)
#order the dates and keep it as number of days.
dates = dates_intervals[regexpr(site_location,samples)>0]
ordered_dates = order(dates)
#dates = gsub(".$","",colnames(vcf_genotype_filter_site_location)[1:ncol(vcf_genotype_filter_site_location)])
#dates = ymd(as.numeric(gsub("^....","",dates)))
#ordered_dates = order(dates)
#x for ordered dates
x = rep(rle(dates[ordered_dates])$values, rle(dates[ordered_dates])$lengths)
###testing the logistic regression for each SNP
#scalar = runif(nrow(vcf_genotype_filter_site_location),min=0, max =1)
scalar = rep(1,nrow(vcf_genotype_filter_site_location))
for(p in 1:nrow(vcf_genotype_filter_site_location))
#for(p in 1:10000)
{
x = x
y = t(fraction_site_location[p,ordered_dates])
if(a !=3) {
#catch error messages with nls_err
fit <- nls_err(y ~ SSlogis(x, Asym, xmid, scal), data = data.frame(x, y))
fitted = summary(fit[[1]])
if(length(fit[[1]])>0) scalar[p] = (fitted$parameters[3,4])
}
if(a == 3) {cor_temp = cor.test_err(x,y) ; if((length(cor_temp[[1]]) > 0) && !is.na(cor_temp[[1]]$p.value)) scalar[p] = cor_temp[[1]]$p.value}
if(p %% 10000 == 0) print(paste(p," of: ",nrow(vcf_genotype_filter_site_location), ", The time is: ",Sys.time(),sep = ""))
}
#fit results into a list
scalar_list[[a]] = scalar
#time check
if(a == 3) scalar_list[[3]][is.na(scalar_list[[3]])] = 1
}
_full_transcrip
write.table(scalar_list,"results/dolicho/scalar_list_min_thres_full_transcrip",row.names = F, col.names = F, quote = F)
#
scalar_list_df = read.table("results/dolicho/scalar_list_min_thres_full_transcrip",header = F)
total = nrow(scalar_list_df)
scalar_list_corrected = scalar_list_df
#qvalue correction
for(a in 1:3)
{
#qvalue correction
scalar_pvalue = scalar_list_df[scalar_list_df[,a]<0.99,a]
scalar_qvalue = qvalue(scalar_pvalue)$pvalues
#  scalar_qvalue =p.adjust(scalar_pvalue,method = "fdr")
scalar_list_corrected[scalar_list_df[,a]<0.99,a] = scalar_qvalue
}
#Overall winners (probably do a qvalue correction to appease the gods!!!!
qval1 = qval2 = qval3 = 0.05
winners_st1 = c(1:total)[(scalar_list_corrected[,1]<qval1)]
winners_st2 = c(1:total)[(scalar_list_corrected[,2]<qval2)]
winners_prm = c(1:total)[(scalar_list_corrected[,3]<qval3)]
winners_4 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,2]<qval2)]
winners_5 = c(1:total)[(scalar_list_corrected[,2]<qval2) & (scalar_list_corrected[,3]<qval3)]
winners_6 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,3]<qval3)]
winners_7 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,2]<qval2) & (scalar_list_corrected[,3]<qval3)]
#winners_matrix
winners = data.frame(matrix(data = 0,nrow = 9,ncol = 2))
colnames(winners) = c("SNPs","genes")
rownames(winners) = c("all","filtered","St1","St2","PRM","St1-St2","St2-PRM","St1-PRM","St1-St2-PRM")
#ALL SNPS
winners[1,1] = nrow(vcf_genotype)
winners[2,1] = nrow(vcf_genotype_filter)
winners[3,1] = length(winners_st1) - length(winners_4) - length(winners_6) - length(winners_7)
winners[4,1] = length(winners_st2) - length(winners_4) - length(winners_5) - length(winners_7)
winners[5,1] = length(winners_prm) - length(winners_5) - length(winners_6) - length(winners_7)
winners[6,1] = length(winners_4) - length(winners_7)
winners[7,1] = length(winners_5) - length(winners_7)
winners[8,1] = length(winners_6) - length(winners_7)
winners[9,1] = length(winners_7)
#all GENES (nb) & all 3 winners
winners[1,2] = length(unique(sort(vcf_genotype[,66])))
winners[2,2] = length(unique(sort(vcf_genotype_filter[,66])))
winners[3,2] = length(unique(sort(vcf_genotype_filter[winners_st1,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[4,2] = length(unique(sort(vcf_genotype_filter[winners_st2,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[5,2] = length(unique(sort(vcf_genotype_filter[winners_prm,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[6,2] = length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[7,2] = length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[8,2] = length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[9,2] = length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners
###permutation test!!!
#Test the 22 in common: is it more than expected by chance? (permutation test!!!)
#1000 perm.! It is more than expected by chance
z = rep(0,1000)
for(i in 1:1000)
{
x = sample(1:total,winners[3,1]+winners[6,1]+winners[8,1]+winners[9,1]) #1493
y = sample(1:total,winners[4,1]+winners[6,1]+winners[7,1]+winners[9,1]) #4269
z = sample(1:total,winners[5,1]+winners[7,1]+winners[8,1]+winners[9,1]) #3118
temp = x[x %in% y ]
a[i] = length(temp[temp %in% z ])
}
mean(a)
#Overall winners (probably do a qvalue correction to appease the gods!!!!
qval1 = qval2 = qval3 = 0.005
winners_st1 = c(1:total)[(scalar_list_corrected[,1]<qval1)]
winners_st2 = c(1:total)[(scalar_list_corrected[,2]<qval2)]
winners_prm = c(1:total)[(scalar_list_corrected[,3]<qval3)]
winners_4 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,2]<qval2)]
winners_5 = c(1:total)[(scalar_list_corrected[,2]<qval2) & (scalar_list_corrected[,3]<qval3)]
winners_6 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,3]<qval3)]
winners_7 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,2]<qval2) & (scalar_list_corrected[,3]<qval3)]
#winners_matrix
winners = data.frame(matrix(data = 0,nrow = 9,ncol = 2))
colnames(winners) = c("SNPs","genes")
rownames(winners) = c("all","filtered","St1","St2","PRM","St1-St2","St2-PRM","St1-PRM","St1-St2-PRM")
#ALL SNPS
winners[1,1] = nrow(vcf_genotype)
winners[2,1] = nrow(vcf_genotype_filter)
winners[3,1] = length(winners_st1) - length(winners_4) - length(winners_6) - length(winners_7)
winners[4,1] = length(winners_st2) - length(winners_4) - length(winners_5) - length(winners_7)
winners[5,1] = length(winners_prm) - length(winners_5) - length(winners_6) - length(winners_7)
winners[6,1] = length(winners_4) - length(winners_7)
winners[7,1] = length(winners_5) - length(winners_7)
winners[8,1] = length(winners_6) - length(winners_7)
winners[9,1] = length(winners_7)
#all GENES (nb) & all 3 winners
winners[1,2] = length(unique(sort(vcf_genotype[,66])))
winners[2,2] = length(unique(sort(vcf_genotype_filter[,66])))
winners[3,2] = length(unique(sort(vcf_genotype_filter[winners_st1,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[4,2] = length(unique(sort(vcf_genotype_filter[winners_st2,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[5,2] = length(unique(sort(vcf_genotype_filter[winners_prm,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[6,2] = length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[7,2] = length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[8,2] = length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[9,2] = length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners
###permutation test!!!
#Test the 22 in common: is it more than expected by chance? (permutation test!!!)
#1000 perm.! It is more than expected by chance
z = rep(0,1000)
for(i in 1:1000)
{
x = sample(1:total,winners[3,1]+winners[6,1]+winners[8,1]+winners[9,1]) #1493
y = sample(1:total,winners[4,1]+winners[6,1]+winners[7,1]+winners[9,1]) #4269
z = sample(1:total,winners[5,1]+winners[7,1]+winners[8,1]+winners[9,1]) #3118
temp = x[x %in% y ]
a[i] = length(temp[temp %in% z ])
}
mean(a)
winners
#Overall winners (probably do a qvalue correction to appease the gods!!!!
qval1 = qval2 = qval3 = 0.01
winners_st1 = c(1:total)[(scalar_list_corrected[,1]<qval1)]
winners_st2 = c(1:total)[(scalar_list_corrected[,2]<qval2)]
winners_prm = c(1:total)[(scalar_list_corrected[,3]<qval3)]
winners_4 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,2]<qval2)]
winners_5 = c(1:total)[(scalar_list_corrected[,2]<qval2) & (scalar_list_corrected[,3]<qval3)]
winners_6 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,3]<qval3)]
winners_7 = c(1:total)[(scalar_list_corrected[,1]<qval1) & (scalar_list_corrected[,2]<qval2) & (scalar_list_corrected[,3]<qval3)]
#winners_matrix
winners = data.frame(matrix(data = 0,nrow = 9,ncol = 2))
colnames(winners) = c("SNPs","genes")
rownames(winners) = c("all","filtered","St1","St2","PRM","St1-St2","St2-PRM","St1-PRM","St1-St2-PRM")
#ALL SNPS
winners[1,1] = nrow(vcf_genotype)
winners[2,1] = nrow(vcf_genotype_filter)
winners[3,1] = length(winners_st1) - length(winners_4) - length(winners_6) - length(winners_7)
winners[4,1] = length(winners_st2) - length(winners_4) - length(winners_5) - length(winners_7)
winners[5,1] = length(winners_prm) - length(winners_5) - length(winners_6) - length(winners_7)
winners[6,1] = length(winners_4) - length(winners_7)
winners[7,1] = length(winners_5) - length(winners_7)
winners[8,1] = length(winners_6) - length(winners_7)
winners[9,1] = length(winners_7)
#all GENES (nb) & all 3 winners
winners[1,2] = length(unique(sort(vcf_genotype[,66])))
winners[2,2] = length(unique(sort(vcf_genotype_filter[,66])))
winners[3,2] = length(unique(sort(vcf_genotype_filter[winners_st1,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[4,2] = length(unique(sort(vcf_genotype_filter[winners_st2,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[5,2] = length(unique(sort(vcf_genotype_filter[winners_prm,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[6,2] = length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[7,2] = length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[8,2] = length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[9,2] = length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners
###permutation test!!!
#Test the 22 in common: is it more than expected by chance? (permutation test!!!)
#1000 perm.! It is more than expected by chance
z = rep(0,1000)
for(i in 1:1000)
{
x = sample(1:total,winners[3,1]+winners[6,1]+winners[8,1]+winners[9,1]) #1493
y = sample(1:total,winners[4,1]+winners[6,1]+winners[7,1]+winners[9,1]) #4269
z = sample(1:total,winners[5,1]+winners[7,1]+winners[8,1]+winners[9,1]) #3118
temp = x[x %in% y ]
a[i] = length(temp[temp %in% z ])
}
mean(a)
dev.new()
hist(a, xlim = c(0,25),freq = F,col = "#80800080",main = "", xlab = "Number of shared genes")
abline(v=22, col = "black",lwd = 4)

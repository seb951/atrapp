geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "red") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue")+
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "glm",method.args = list(family = "lm"),se = FALSE,col = "green")
regression
regression = ggplot(winner_candidate) +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "red") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue")+
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "green")
regression
regression = ggplot(winner_candidate) +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red")
regression
regression = ggplot(winner_candidate) +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red")
regression
regression = ggplot(winner_candidate) +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red")
regression
regression = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4)
regression
regression = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se=T,col = "darkgreen") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = T,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = T,col = "red") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4)
regression
regression = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4)
regression
regression = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red") +
geom_smooth(aes(x = dates_intervals,y = fraction),data=winner_candidate,method = "glm",method.args = list(family = "binomial"),se = T,col = "pink") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4)
regression
regression = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red") +
geom_smooth(aes(x = dates_intervals,y = fraction),data=winner_candidate,method = "glm",method.args = list(family = "binomial"),se = T,col = "black") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4)
regression
regression = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen") +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red") +
#geom_smooth(aes(x = dates_intervals,y = fraction),data=winner_candidate,method = "glm",method.args = list(family = "binomial"),se = T,col = "black") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4)
regression
regression = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red",fullrange=TRUE) +
#geom_smooth(aes(x = dates_intervals,y = fraction),data=winner_candidate,method = "glm",method.args = list(family = "binomial"),se = T,col = "black") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4)
regression
reg = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red",fullrange=F) +
#geom_smooth(aes(x = dates_intervals,y = fraction),data=winner_candidate,method = "glm",method.args = list(family = "binomial"),se = T,col = "black") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4) +
xlab("Nb days since June 1st")
reg
par(mgp = c(3.5,2,1),mar = c(5,5,4,2))
reg = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red",fullrange=F) +
#geom_smooth(aes(x = dates_intervals,y = fraction),data=winner_candidate,method = "glm",method.args = list(family = "binomial"),se = T,col = "black") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4) +
xlab("Nb days since June 1st")
reg
dev.new()
reg
reg = ggplot(winner_candidate) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St1",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "darkgreen",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="St2",],method = "glm",method.args = list(family = "binomial"),se = FALSE,col = "blue",fullrange=TRUE) +
geom_smooth(aes(x = dates_intervals,y = fraction),data = winner_candidate[winner_candidate[,1]=="PRM",],method = "lm",se = FALSE,col = "red",fullrange=F) +
#geom_smooth(aes(x = dates_intervals,y = fraction),data=winner_candidate,method = "glm",method.args = list(family = "binomial"),se = T,col = "black") +
geom_point(aes(x = dates_intervals,y = fraction,col =location),size = 4) +
xlab("Nb days since June 1st") +
scale_x_continuous(breaks=c(0,25,50,75,100,125,150))
reg
dev.print(device=pdf,"../results/dolicho/candidate_ggplot.pdf", onefile=FALSE)
dev.off()
winners
library(ggplot2)
library(ggforce)
setwd("/Users/jerry/Documents/CSBQ/shapiro")
#coordinates of the 3 circles
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('St1', 'St2', 'PRM'))
#data
winners = read.table("results/dolicho/winners")
winners=format(winners,big.mark  = ",")
winners[,1] = gsub(" ","",winners[,1])
winners[,2] = gsub(" ","",winners[,2])
winners
#setwd and packages and modified nls_err function
setwd("/Users/jerry/Documents/CSBQ/shapiro/Rcode")
source("factory.R")
library(vcfR)
library(qvalue)
library(lubridate)
library(ggplot2)
library(gridExtra)
#load vcf and reference
vcf <- read.vcfR("../results/dolicho/dolicho.vcf")
dna <- ape::read.dna("../results/dolicho/Trinity_longest.fasta", format = "fasta")
#simplify names of files
samples = unlist(lapply(strsplit(colnames(vcf@gt)[-1],split = "_"), `[[`, 4))
samples = paste(samples,unlist(lapply(strsplit(colnames(vcf@gt)[-1],split = "_"), `[[`, 5)),sep = "-")
samples = gsub("Champ","",samples)
samples = gsub("-WatPhotz-RNA","",samples)
colnames(vcf@gt)[-1] = samples
#get data into a genotype matrix
vcf_genotype = as.data.frame(vcf@gt[,-1],stringsAsFactors = F)
vcf_genotype$chrom = vcf@fix[,1]
vcf_genotype$ref = vcf@fix[,4]
vcf_genotype$alt = vcf@fix[,5]
vcf_genotype$pos = vcf@fix[,2]
#allleles and fractions
minor = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
major = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
fraction = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
for(j in 1:(ncol(vcf@gt)-1))
{
vcf_genotype[,j] = unlist(lapply(strsplit(vcf_genotype[,j],split = ":"), `[[`, 3))
temp_ref = as.numeric(unlist(lapply(strsplit(vcf_genotype[,j],split = ","), `[[`, 1)))
temp_alt = as.numeric(unlist(lapply(strsplit(vcf_genotype[,j],split = ","), `[[`, 2)))
major[,j] = temp_ref
minor[,j] = temp_alt
fraction[,j] = temp_ref / (temp_ref+temp_alt)
}
###
###create a filter to remove too much misssing (50%)
###
filter = rep(0,nrow(fraction))
missing = length(samples)*0.5
for(f in 1:length(filter))
{
if(length(c(1:length(samples))[is.na(fraction[f,])==F])>missing) filter[f] = 1
}
###
#MAF and minor allele frequencies, Fraction of MAF and mAF
###
major_filt = major[filter ==1,]
minor_filt = minor[filter ==1,]
fraction_filt = fraction[filter ==1,]
vcf_genotype_filter = vcf_genotype[filter ==1,]
dim(vcf_genotype_filter)
#date start on 06-01, then +1 day each day...
dates_temp = colnames(vcf_genotype_filter)[1:65]
dates_temp = gsub("^....","",dates_temp)
dates_temp = ymd(as.numeric(gsub(".$","",dates_temp)))
dates_intervals = rep(0,65)
for(d in 2:65)
{
x = interval(dates_temp[1],dates_temp[d])
dates_intervals[d] = x %/% days(1)
}
#store scalar values
scalar_list = list()
#
scalar_list_df = read.table("../results/dolicho/scalar_list",header = F)
scalar_list_corrected = scalar_list_df
#qvalue correction
for(a in 1:3)
{
#qvalue correction
scalar_pvalue = scalar_list_df[scalar_list_df[,a]<0.99,a]
scalar_positions = c(1:72055)[scalar_list_df[,a]<0.99]
scalar_qvalue = qvalue(scalar_pvalue)$qvalues
scalar_list_corrected[scalar_list_df[,a]<0.99,a] = scalar_qvalue
}
#Overall winners (probably do a qvalue correction to appease the gods!!!!
qval = 0.05
winners_st1 = c(1:72055)[(scalar_list_corrected[,1]<qval)]
winners_st2 = c(1:72055)[(scalar_list_corrected[,2]<qval)]
winners_prm = c(1:72055)[(scalar_list_corrected[,3]<qval)]
winners_4 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval)]
winners_5 = c(1:72055)[(scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
winners_6 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,3]<qval)]
winners_7 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
#winners_matrix
winners = data.frame(matrix(data = 0,nrow = 9,ncol = 2))
colnames(winners) = c("SNPs","genes")
rownames(winners) = c("all","filtered","St1","St2","PRM","St1-St2","St2-PRM","St1-PRM","St1-St2-PRM")
#ALL SNPS
winners[1,1] = nrow(vcf_genotype)
winners[2,1] = nrow(vcf_genotype_filter)
winners[3,1] = length(winners_st1) - length(winners_4) - length(winners_6) - length(winners_7)
winners[4,1] = length(winners_st2) - length(winners_4) - length(winners_5) - length(winners_7)
winners[5,1] = length(winners_prm) - length(winners_5) - length(winners_6) - length(winners_7)
winners[6,1] = length(winners_4) - length(winners_7)
winners[7,1] = length(winners_5) - length(winners_7)
winners[8,1] = length(winners_6) - length(winners_7)
winners[9,1] = length(winners_7)
#all GENES (nb) & all 3 winners
winners[1,2] = length(unique(sort(vcf_genotype[,66])))
winners[2,2] = length(unique(sort(vcf_genotype_filter[,66])))
winners[3,2] = length(unique(sort(vcf_genotype_filter[winners_st1,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[4,2] = length(unique(sort(vcf_genotype_filter[winners_st2,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[5,2] = length(unique(sort(vcf_genotype_filter[winners_prm,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[6,2] = length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[7,2] = length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[8,2] = length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[9,2] = length(unique(sort(vcf_genotype_filter[winners_7,66])))
write.table(sort(vcf_genotype_filter[winners_7,66]),"../results/dolicho/candidates_all_three",row.names = F, col.names = F,quote = F)
write.table(winners,"../results/dolicho/winners")
library(ggplot2)
library(ggforce)
setwd("/Users/jerry/Documents/CSBQ/shapiro")
#coordinates of the 3 circles
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('St1', 'St2', 'PRM'))
#data
winners = read.table("results/dolicho/winners")
winners=format(winners,big.mark  = ",")
winners[,1] = gsub(" ","",winners[,1])
winners[,2] = gsub(" ","",winners[,2])
circle.data = data.frame(x.position = c(0, 1.4, -1.4,0.8, -0.8, 0, 0),y.position = c(1.6, -1,-1, 0.25,0.25, -1.25, -0.2),
categories = c("St1","St2","PRM","St1-St2","St1-PRM","St2-PRM","St1-St2-PRM"),counts=winners[3:9,1],
counts_genes=paste("(",winners[3:9,2], ")", sep = ""),stringsAsFactors = F)
circle.data$counts_genes[1] = "(669 genes)"
circle.data$counts[1] = "1,493 SNPs"
circle.data$counts_modif = paste(circle.data$counts,circle.data$counts_genes)
rectangle.data = data.frame(x.position = -1.4, y.position = 2.3,
counts = paste(winners[1,1]," SNPs in ",winners[1,2]," genes\n (Filtered: ",winners[2,1]," SNPs in ",winners[2,2]," genes)",sep = ""))
####ggplot + geom_circle function
#geom_circle will draw the circles, with various options to make it prettier
#annotate will add text
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .5, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
#  scale_fill_manual(values = c("#000000","#0000FF","#FF0000")) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts_modif, size = 4) +
# annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 3) +
annotate("text", x = rectangle.data$x.position, y = rectangle.data$y.position, label = rectangle.data$counts, size = 4,fontface =2)
#save graph as pdf on the desktop
#dev.new(width=6, height=6,noRStudioGD = TRUE)
svg("results/dolicho/figures/venn.svg",width=6, height=6)
venn
#dev.print(device=pdf,"../results/dolicho/venn_figure.pdf", onefile=FALSE)
dev.off()
###barcharts
go = read.table("results/dolicho/pantherChart.txt",stringsAsFactors = F,sep = "\t")
svg("results/dolicho/go_figure.svg",width=8, height=4)
par(mar = c(8,4,4,2))
barplot(height = go[,3],names.arg = go[,6],las = 2,cex.names = 0.7)
text(x = seq(1,6,by=1.2),y= rep(-5,5),labels = go[,7],xpd = T,srt = 90,cex = 0.7)
dev.off()
winners
#
scalar_list_df = read.table("../results/dolicho/scalar_list",header = F)
scalar_list_corrected = scalar_list_df
#qvalue correction
for(a in 1:3)
{
#qvalue correction
scalar_pvalue = scalar_list_df[scalar_list_df[,a]<0.99,a]
scalar_positions = c(1:72055)[scalar_list_df[,a]<0.99]
scalar_qvalue = qvalue(scalar_pvalue)$qvalues
scalar_list_corrected[scalar_list_df[,a]<0.99,a] = scalar_qvalue
}
#Overall winners (probably do a qvalue correction to appease the gods!!!!
qval = 0.05
winners_st1 = c(1:72055)[(scalar_list_corrected[,1]<qval)]
winners_st2 = c(1:72055)[(scalar_list_corrected[,2]<qval)]
winners_prm = c(1:72055)[(scalar_list_corrected[,3]<qval)]
winners_4 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval)]
winners_5 = c(1:72055)[(scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
winners_6 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,3]<qval)]
winners_7 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
#winners_matrix
winners = data.frame(matrix(data = 0,nrow = 9,ncol = 2))
colnames(winners) = c("SNPs","genes")
rownames(winners) = c("all","filtered","St1","St2","PRM","St1-St2","St2-PRM","St1-PRM","St1-St2-PRM")
#ALL SNPS
winners[1,1] = nrow(vcf_genotype)
winners[2,1] = nrow(vcf_genotype_filter)
winners[3,1] = length(winners_st1) - length(winners_4) - length(winners_6) - length(winners_7)
winners[4,1] = length(winners_st2) - length(winners_4) - length(winners_5) - length(winners_7)
winners[5,1] = length(winners_prm) - length(winners_5) - length(winners_6) - length(winners_7)
winners[6,1] = length(winners_4) - length(winners_7)
winners[7,1] = length(winners_5) - length(winners_7)
winners[8,1] = length(winners_6) - length(winners_7)
winners[9,1] = length(winners_7)
#all GENES (nb) & all 3 winners
winners[1,2] = length(unique(sort(vcf_genotype[,66])))
winners[2,2] = length(unique(sort(vcf_genotype_filter[,66])))
winners[3,2] = length(unique(sort(vcf_genotype_filter[winners_st1,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[4,2] = length(unique(sort(vcf_genotype_filter[winners_st2,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[5,2] = length(unique(sort(vcf_genotype_filter[winners_prm,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[6,2] = length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[7,2] = length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[8,2] = length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[9,2] = length(unique(sort(vcf_genotype_filter[winners_7,66])))
#
scalar_list_df = read.table("results/dolicho/scalar_list",header = F)
scalar_list_corrected = scalar_list_df
#qvalue correction
for(a in 1:3)
{
#qvalue correction
scalar_pvalue = scalar_list_df[scalar_list_df[,a]<0.99,a]
scalar_positions = c(1:72055)[scalar_list_df[,a]<0.99]
scalar_qvalue = qvalue(scalar_pvalue)$qvalues
scalar_list_corrected[scalar_list_df[,a]<0.99,a] = scalar_qvalue
}
#Overall winners (probably do a qvalue correction to appease the gods!!!!
qval = 0.05
winners_st1 = c(1:72055)[(scalar_list_corrected[,1]<qval)]
winners_st2 = c(1:72055)[(scalar_list_corrected[,2]<qval)]
winners_prm = c(1:72055)[(scalar_list_corrected[,3]<qval)]
winners_4 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval)]
winners_5 = c(1:72055)[(scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
winners_6 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,3]<qval)]
winners_7 = c(1:72055)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
#winners_matrix
winners = data.frame(matrix(data = 0,nrow = 9,ncol = 2))
colnames(winners) = c("SNPs","genes")
rownames(winners) = c("all","filtered","St1","St2","PRM","St1-St2","St2-PRM","St1-PRM","St1-St2-PRM")
#ALL SNPS
winners[1,1] = nrow(vcf_genotype)
winners[2,1] = nrow(vcf_genotype_filter)
winners[3,1] = length(winners_st1) - length(winners_4) - length(winners_6) - length(winners_7)
winners[4,1] = length(winners_st2) - length(winners_4) - length(winners_5) - length(winners_7)
winners[5,1] = length(winners_prm) - length(winners_5) - length(winners_6) - length(winners_7)
winners[6,1] = length(winners_4) - length(winners_7)
winners[7,1] = length(winners_5) - length(winners_7)
winners[8,1] = length(winners_6) - length(winners_7)
winners[9,1] = length(winners_7)
#all GENES (nb) & all 3 winners
winners[1,2] = length(unique(sort(vcf_genotype[,66])))
winners[2,2] = length(unique(sort(vcf_genotype_filter[,66])))
winners[3,2] = length(unique(sort(vcf_genotype_filter[winners_st1,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[4,2] = length(unique(sort(vcf_genotype_filter[winners_st2,66]))) - length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[5,2] = length(unique(sort(vcf_genotype_filter[winners_prm,66]))) - length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[6,2] = length(unique(sort(vcf_genotype_filter[winners_4,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[7,2] = length(unique(sort(vcf_genotype_filter[winners_5,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[8,2] = length(unique(sort(vcf_genotype_filter[winners_6,66]))) - length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners[9,2] = length(unique(sort(vcf_genotype_filter[winners_7,66])))
winners
library(ggplot2)
library(ggforce)
setwd("/Users/jerry/Documents/CSBQ/shapiro")
#coordinates of the 3 circles
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('St1', 'St2', 'PRM'))
#data
winners = read.table("results/dolicho/winners")
winners=format(winners,big.mark  = ",")
winners[,1] = gsub(" ","",winners[,1])
winners[,2] = gsub(" ","",winners[,2])
circle.data = data.frame(x.position = c(0, 1.4, -1.4,0.8, -0.8, 0, 0),y.position = c(1.6, -1,-1, 0.25,0.25, -1.25, -0.2),
categories = c("St1","St2","PRM","St1-St2","St1-PRM","St2-PRM","St1-St2-PRM"),counts=winners[3:9,1],
counts_genes=paste("(",winners[3:9,2], ")", sep = ""),stringsAsFactors = F)
circle.data$counts_genes[1] = "(352 genes)"
circle.data$counts[1] = "1,029 SNPs"
circle.data$counts_modif = paste(circle.data$counts,circle.data$counts_genes)
rectangle.data = data.frame(x.position = -1.4, y.position = 2.3,
counts = paste(winners[1,1]," SNPs in ",winners[1,2]," genes\n (Filtered: ",winners[2,1]," SNPs in ",winners[2,2]," genes)",sep = ""))
####ggplot + geom_circle function
#geom_circle will draw the circles, with various options to make it prettier
#annotate will add text
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .5, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
#  scale_fill_manual(values = c("#000000","#0000FF","#FF0000")) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts_modif, size = 4) +
# annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 3) +
annotate("text", x = rectangle.data$x.position, y = rectangle.data$y.position, label = rectangle.data$counts, size = 4,fontface =2)
#save graph as pdf on the desktop
#dev.new(width=6, height=6,noRStudioGD = TRUE)
svg("results/dolicho/figures/venn.svg",width=6, height=6)
venn
#dev.print(device=pdf,"../results/dolicho/venn_figure.pdf", onefile=FALSE)
dev.off()
(2588/72055) * (3617/72055) * (1029 / 72055)
(3617/72055) * (1029 / 72055)
(2588/72055) * (3617/72055) * (1029 / 72055) * 720555
(2588/72055) * (3617/72055) * (1029 / 72055) * 72055
sample(1:10,1)
sample(1:10,5)
x = sample(1:10,5)
x = sample(1:10,5) x = sample(1:100,10)
y = sample(1:100,10)
x = sample(1:100,10)
y = sample(1:100,10)
x
y
match(x,y)
match(x,y)
x==y
x[x==y]
length(x[x==y])
z = rep(0,1000)
for(i in 1:1000)
{
x = sample(1:100,10)
y = sample(1:100,10)
z[i] = length(x[x==y])
}
i
mean(z)
z = rep(0,1000)
for(i in 1:1000)
{
x = sample(1:100,10)
y = sample(1:100,10)
z[i] = length(x[x==y])
}
mean(z)
length(winners_st1)
length(winners_st2)
length(winners_st3)
length(winners_prm)
z = rep(0,1000)
for(i in 1:1000)
{
x = sample(1:72055,1493)
y = sample(1:72055,4269)
#z = sample(1:72055,3118)
a[i] = length(x[x==y])
}
warnings()
x = sample(1:72055,1493)
y = sample(1:72055,4269)
x &in& y
x %in% y
x[(x %in% y )]
y[(x %in% y )]
length(x %in% y )
x[(x %in% y )]
z = rep(0,1000)
for(i in 1:1000)
{
x = sample(1:72055,1493)
y = sample(1:72055,4269)
#z = sample(1:72055,3118)
a[i] = length(x[x %in% y ])
}
mean(a)
1/70*4/70
1/70*4/70 * 72000
1.5/70*4.2/70 * 72000
x = sample(1:72055,1493)
y = sample(1:72055,4269)
z = sample(1:72055,3118)
x = sample(1:72055,1493)
y = sample(1:72055,4269)
z = sample(1:72055,3118)
temp = x[x %in% y ]
temp
temp[temp %in% z ]
z = rep(0,1000)
for(i in 1:1000)
{
x = sample(1:72055,1493)
y = sample(1:72055,4269)
z = sample(1:72055,3118)
temp = x[x %in% y ]
a[i] = length(temp[temp %in% z ])
}
hist(a)
dev.new()
hist(a)
z = rep(0,5000)
for(i in 1:5000)
{
x = sample(1:72055,1493)
y = sample(1:72055,4269)
z = sample(1:72055,3118)
temp = x[x %in% y ]
a[i] = length(temp[temp %in% z ])
}
hist(a)
mean(a)
z = rep(0,10000)
for(i in 1:10000)
{
x = sample(1:72055,1493)
y = sample(1:72055,4269)
z = sample(1:72055,3118)
temp = x[x %in% y ]
a[i] = length(temp[temp %in% z ])
}
mean(a)

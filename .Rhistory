header[1,91]
header2[1,91]
header2[1,]
header2[1,24]
header[1,24]
env_old = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v1seb.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",skip = 1)
env = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v2.Final.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",skip = 1)
header_old  = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v1seb.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",nrows = 1)
header  = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v2.Final.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",nrows = 1)
env = env[,1:91]
colnames(env) = header[1,1:91]
env[,4] = mdy(paste(env[,4]," 2016"))
library(lubridate)
library(ggplot)
#load env. data
env_old = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v1seb.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",skip = 1)
env = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v2.Final.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",skip = 1)
header_old  = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v1seb.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",nrows = 1)
header  = read.table("results/GRDI_ECO_formated_Metadata_CNRC_2016_for_stats_Jesse_v2.Final.txt",
header = F, stringsAsFactors = F,sep = "\t",comment.char = "",nrows = 1)
env = env[,1:91]
colnames(env) = header[1,1:91]
env[,4] = mdy(paste(env[,4]," 2016"))
head(env[,c(6,21,27)]))
head(env[,c(6,21,27)])
(env[,c(6,21,27)])
env_ggplot = data.frame(values = as.numeric(unlist(env[,c(6,21,27)])),date = env[,4],var1 = c(rep("N",44),rep("P",44),rep("Chl",44)))
env_ggplot$var2 <- factor(env_ggplot$var1, labels = c("Chlorophyl A\n(ug/L)", "Nitrogen\n(mg N/L)l", "Phosphorus\n(ug P/L)"))
p = ggplot() + labs(title = "Lake Champlain") +
geom_point(aes(x = date, y = values),na.rm=T,data = env_ggplot) +
theme_bw() +
ylab("Concentration") +
xlab("Sampling date") +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
scale_x_date(date_breaks = "months" , date_labels = "%b") +
facet_grid(rows=vars(var2),scales="free")
p
library(ggplot)
library(ggplot2)
p = ggplot() + labs(title = "Lake Champlain") +
geom_point(aes(x = date, y = values),na.rm=T,data = env_ggplot) +
theme_bw() +
ylab("Concentration") +
xlab("Sampling date") +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
scale_x_date(date_breaks = "months" , date_labels = "%b") +
facet_grid(rows=vars(var2),scales="free")
p
dev.new(width=6, height=4,noRStudioGD = TRUE)
p
dev.off()
dev.off()
dev.off()
#graph = "pdf"
graph = "png"
if(graph == "pdf") { dev.new(width=6, height=4,noRStudioGD = TRUE) }
if(graph == "png") { png("figures/environmental_data.png",width=6, res =400,height=4,units= 'in') }
p = ggplot() + labs(title = "Lake Champlain") +
geom_point(aes(x = date, y = values),na.rm=T,data = env_ggplot) +
theme_bw() +
ylab("Concentration") +
xlab("Sampling date") +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
scale_x_date(date_breaks = "months" , date_labels = "%b") +
facet_grid(rows=vars(var2),scales="free")
p
#PDF
if(graph == "pdf")  {  dev.print(device=pdf, "figures/environmental_data.pdf", onefile=FALSE)  }
dev.off()
graph = "pdf"
#graph = "png"
if(graph == "pdf") { dev.new(width=6, height=4,noRStudioGD = TRUE) }
if(graph == "png") { png("figures/environmental_data.png",width=6, res =400,height=4,units= 'in') }
p = ggplot() + labs(title = "Lake Champlain") +
geom_point(aes(x = date, y = values),na.rm=T,data = env_ggplot) +
theme_bw() +
ylab("Concentration") +
xlab("Sampling date") +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
scale_x_date(date_breaks = "months" , date_labels = "%b") +
facet_grid(rows=vars(var2),scales="free")
p
#PDF
if(graph == "pdf")  {  dev.print(device=pdf, "figures/environmental_data.pdf", onefile=FALSE)  }
dev.off()
env_ggplot = data.frame(values = as.numeric(unlist(env[,c(6,21,27)])),date = env[,4],var1 = c(rep("N",44),rep("P",44),rep("Chl",44)))
env_ggplot$var2 <- factor(env_ggplot$var1, labels = c("Chlorophyl A\n(ug/L)", "Nitrogen\n(mg N/L)", "Phosphorus\n(ug P/L)"))
graph = "pdf"
#graph = "png"
if(graph == "pdf") { dev.new(width=6, height=4,noRStudioGD = TRUE) }
if(graph == "png") { png("figures/environmental_data.png",width=6, res =400,height=4,units= 'in') }
p = ggplot() + labs(title = "Lake Champlain") +
geom_point(aes(x = date, y = values),na.rm=T,data = env_ggplot) +
theme_bw() +
ylab("Concentration") +
xlab("Sampling date") +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
scale_x_date(date_breaks = "months" , date_labels = "%b") +
facet_grid(rows=vars(var2),scales="free")
p
#PDF
if(graph == "pdf")  {  dev.print(device=pdf, "figures/environmental_data.pdf", onefile=FALSE)  }
dev.off()
#graph = "pdf"
graph = "png"
if(graph == "pdf") { dev.new(width=6, height=4,noRStudioGD = TRUE) }
if(graph == "png") { png("figures/environmental_data.png",width=6, res =400,height=4,units= 'in') }
p = ggplot() + labs(title = "Lake Champlain") +
geom_point(aes(x = date, y = values),na.rm=T,data = env_ggplot) +
theme_bw() +
ylab("Concentration") +
xlab("Sampling date") +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) +
scale_x_date(date_breaks = "months" , date_labels = "%b") +
facet_grid(rows=vars(var2),scales="free")
p
#PDF
if(graph == "pdf")  {  dev.print(device=pdf, "figures/environmental_data.pdf", onefile=FALSE)  }
dev.off()
dim(env)
env[1:4,1:10]
env[1:4,11:20]
env[1:4,21:30]
tox = 30
env[1:4,31:40]
tox = 30,33
tox = c(30,33)
env[1:4,41:50]
env[1:4,51:60]
env[1:4,61:70]
env[1:4,71:80]
env[1:4,81:90]
env[1:4,90:91]
env[,tox]
plot(env[,tox])
cor(env[,tox])
cor(env[-33,tox])
plot(env[-33,tox])a
plot(env[-33,tox])
tox
plot(env[,c(6,30)])
plot(env[-33,c(6,30)])
plot(env[-33,c(21,30)])
plot(env[-33,c(27,30)])
plot(env[-33,c(27,33)])
plot(env[-33,c(21,33)])
plot(env[-33,c(6,33)])
env[,4]
setwd("/Users/jerry/Documents/CSBQ/shapiro")
#packages
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
library(dplyr)
system("ls -1 results/cyano/func_results/*annot_function.tsv >all.tsv")
all.tsv = read.table("all.tsv", stringsAsFactors = F)
all_spp = NULL
samples = NULL
locations = NULL
all_spp_five = NULL
#first loop is to subset the major species (over 1%)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown unknown unknown")
#simplify name
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
refseq.all = refseq.all[order(refseq.all$V1,decreasing =T),]
all_spp = c(all_spp,refseq.all[,1]) #keep only top 10
all_spp_five = c(all_spp_five,refseq.all[refseq.all[,3]>150,1]) #keep only the ones that are at more than a count of 1....
}
#simplify by genus
all_spp_five_m = unique(sort(unlist(all_spp_five)))
all_spp_m = data.frame(unique(sort(unlist(all_spp))),stringsAsFactors = F)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown")
#simplify by genus
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,1] == all_spp_m[j,1],3]
if(length(temp$V2) == 1) all_spp_m[j,i+1] = temp
if(length(temp$V2) == 0) all_spp_m[j,i+1] = 0
}
#get a proper shortname for the graph
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
samples = c(samples,rep(paste(date,replicate,sep = "_"),nrow(all_spp_m)))
locations = c(locations,rep(location,nrow(all_spp_m)))
}
all_spp_m_ggplot = data.frame(unlist(all_spp_m[,2:66]))
all_spp_m_ggplot[,2] = rep(all_spp_m[,1],65)
all_spp_m_ggplot[,3] = samples
all_spp_m_ggplot[,4] = locations
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot[,4], levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot$locations, levels=c('St1','St2','PRM'))
#top percentage according to "all_spp_five_m" vector
all_spp_m_ggplot_top12 = NULL
for(i in 1:length(all_spp_five_m))
{
all_spp_m_ggplot_top12 = rbind(all_spp_m_ggplot_top12,all_spp_m_ggplot[all_spp_m_ggplot[,2] == all_spp_five_m[i],])
}
#just get a better name
temp1 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 1))
temp2 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 2))
temp3 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 3))
all_spp_m_ggplot_top12$names = paste(temp3, " (",temp1," ",temp2,")",sep = "")
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p_cyano=ggplot() + labs(title = "Lake Champlain - cyanotoxic genes",fill = "Gene names (species)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(length(all_spp_five_m))) +
geom_bar(aes(y = fraction, x = samples, fill = names),
data = all_spp_m_ggplot_top12,stat="identity") + ylab("Counts of annotated cyanotoxic genes")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.new(width=10, height=8,noRStudioGD = TRUE)
p_cyano + facet_grid(rows=vars(locations_f))
dev.print(device=pdf,"figures/Champlain_cyano_barplot.pdf", onefile=FALSE)
dim(all_spp_m_ggplot)
head(all_spp_m_ggplot)
head(refseq.all)
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown unknown unknown")
#simplify name
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
head(refseq.all)
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
refseq.all = refseq.all[order(refseq.all$V1,decreasing =T),]
head(refseq.all)
setwd("/Users/jerry/Documents/CSBQ/shapiro")
#packages
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
library(dplyr)
system("ls -1 results/cyano/func_results/*annot_function.tsv >all.tsv")
all.tsv = read.table("all.tsv", stringsAsFactors = F)
all_spp = NULL
samples = NULL
locations = NULL
all_spp_five = NULL
#first loop is to subset the major species (over 1%)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown unknown unknown")
#simplify name
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
refseq.all = refseq.all[order(refseq.all$V1,decreasing =T),]
all_spp = c(all_spp,refseq.all[,1]) #keep only top 10
all_spp_five = c(all_spp_five,refseq.all[refseq.all[,3]>150,1]) #keep only the ones that are at more than a count of 1....
}
#simplify by genus
all_spp_five_m = unique(sort(unlist(all_spp_five)))
all_spp_m = data.frame(unique(sort(unlist(all_spp))),stringsAsFactors = F)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown")
#simplify by genus
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,1] == all_spp_m[j,1],2] #fraction (2) or total count (3)
if(length(temp$V2) == 1) all_spp_m[j,i+1] = temp
if(length(temp$V2) == 0) all_spp_m[j,i+1] = 0
}
#get a proper shortname for the graph
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
samples = c(samples,rep(paste(date,replicate,sep = "_"),nrow(all_spp_m)))
locations = c(locations,rep(location,nrow(all_spp_m)))
}
all_spp_m_ggplot = data.frame(unlist(all_spp_m[,2:66]))
all_spp_m_ggplot[,2] = rep(all_spp_m[,1],65)
all_spp_m_ggplot[,3] = samples
all_spp_m_ggplot[,4] = locations
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot[,4], levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot$locations, levels=c('St1','St2','PRM'))
#top percentage according to "all_spp_five_m" vector
all_spp_m_ggplot_top12 = NULL
for(i in 1:length(all_spp_five_m))
{
all_spp_m_ggplot_top12 = rbind(all_spp_m_ggplot_top12,all_spp_m_ggplot[all_spp_m_ggplot[,2] == all_spp_five_m[i],])
}
#just get a better name
temp1 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 1))
temp2 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 2))
temp3 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 3))
all_spp_m_ggplot_top12$names = paste(temp3, " (",temp1," ",temp2,")",sep = "")
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p_cyano=ggplot() + labs(title = "Lake Champlain - cyanotoxic genes",fill = "Gene names (species)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(length(all_spp_five_m))) +
geom_bar(aes(y = fraction, x = samples, fill = names),
data = all_spp_m_ggplot_top12,stat="identity") + ylab("Counts of annotated cyanotoxic genes")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.new(width=10, height=8,noRStudioGD = TRUE)
p_cyano + facet_grid(rows=vars(locations_f))
dim(all_spp_m_ggplot_top12)
head(all_spp_m_ggplot_top12)
all_spp_m_ggplot_top12[,1]
hed(all_spp_m_ggplot)
hed(all_spp_m_ggplot)
head(all_spp_m_ggplot)
head(all_spp_m_ggplot[,1])
(all_spp_m_ggplot[,1])
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown")
#simplify by genus
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
head(refseq.all)
all_spp_m
dim(all_spp_m)
j = 1
temp = refseq.all[refseq.all[,1] == all_spp_m[j,1],2] #fraction (2) or total count (3)
temo
temp
length(temp$V2)
#packages
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
library(dplyr)
system("ls -1 results/cyano/func_results/*annot_function.tsv >all.tsv")
all.tsv = read.table("all.tsv", stringsAsFactors = F)
all_spp = NULL
samples = NULL
locations = NULL
all_spp_five = NULL
#first loop is to subset the major species (over 1%)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown unknown unknown")
#simplify name
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
refseq.all = refseq.all[order(refseq.all$V1,decreasing =T),]
all_spp = c(all_spp,refseq.all[,1]) #keep only top 10
all_spp_five = c(all_spp_five,refseq.all[refseq.all[,3]>150,1]) #keep only the ones that are at more than a count of 1....
}
#simplify by genus
all_spp_five_m = unique(sort(unlist(all_spp_five)))
all_spp_m = data.frame(unique(sort(unlist(all_spp))),stringsAsFactors = F)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown")
#simplify by genus
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,1] == all_spp_m[j,1],2] #fraction (2) or total count (3)
if(length(temp$V1) == 1) all_spp_m[j,i+1] = temp #fraction (V2) or total count (V1)
if(length(temp$V1) == 0) all_spp_m[j,i+1] = 0 #fraction (V2) or total count (V1)
}
#get a proper shortname for the graph
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
samples = c(samples,rep(paste(date,replicate,sep = "_"),nrow(all_spp_m)))
locations = c(locations,rep(location,nrow(all_spp_m)))
}
all_spp_m_ggplot = data.frame(unlist(all_spp_m[,2:66]))
all_spp_m_ggplot[,2] = rep(all_spp_m[,1],65)
all_spp_m_ggplot[,3] = samples
all_spp_m_ggplot[,4] = locations
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot[,4], levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot$locations, levels=c('St1','St2','PRM'))
#top percentage according to "all_spp_five_m" vector
all_spp_m_ggplot_top12 = NULL
for(i in 1:length(all_spp_five_m))
{
all_spp_m_ggplot_top12 = rbind(all_spp_m_ggplot_top12,all_spp_m_ggplot[all_spp_m_ggplot[,2] == all_spp_five_m[i],])
}
#just get a better name
temp1 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 1))
temp2 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 2))
temp3 = unlist(lapply(strsplit(all_spp_m_ggplot_top12[,2],split = " "), `[[`, 3))
all_spp_m_ggplot_top12$names = paste(temp3, " (",temp1," ",temp2,")",sep = "")
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p_cyano=ggplot() + labs(title = "Lake Champlain - cyanotoxic genes",fill = "Gene names (species)") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(length(all_spp_five_m))) +
geom_bar(aes(y = fraction, x = samples, fill = names),
data = all_spp_m_ggplot_top12,stat="identity") + ylab("Counts of annotated cyanotoxic genes")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#PDF (dimensions in inches)
dev.new(width=10, height=8,noRStudioGD = TRUE)
p_cyano + facet_grid(rows=vars(locations_f))
i = 1
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown")
#simplify by genus
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,1] == all_spp_m[j,1],2] #fraction (2) or total count (3)
if(length(temp$V1) == 1) all_spp_m[j,i+1] = temp #fraction (V2) or total count (V1)
if(length(temp$V1) == 0) all_spp_m[j,i+1] = 0 #fraction (V2) or total count (V1)
}
temp
j
all_spp_m[j,]
all_spp_m[j,1:@]
all_spp_m[j,1:2]
all_spp_m[1:2,]
all_spp_m[1,1:2]
all_spp_m[,1:2]
all_spp_m[,2]
sum(all_spp_m[,2])
refseq.all
refseq.all[,2]
sum(refseq.all[,2])
sum(refseq.all[,3])
i
i
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown")
#simplify by genus
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,1] == all_spp_m[j,1],2] #fraction (2) or total count (3)
if(length(temp$V1) == 1) all_spp_m[j,i+1] = temp #fraction (V2) or total count (V1)
if(length(temp$V1) == 0) all_spp_m[j,i+1] = 0 #fraction (V2) or total count (V1)
}
sum(refseq.all[,3])
refseq.all
all.tsv[i,1]
hed(all.tsv)
head(all.tsv)
i =2
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#unknowns
refseq.all[refseq.all[,3] == "Not",3] = c("unknown unknown unknown unknown")
#simplify by genus
refseq.all$genes1 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all$genes2 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 2))
refseq.all$genes3 = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 3))
refseq.all$genes = paste(refseq.all$genes1,refseq.all$genes2,refseq.all$genes3,sep = " ")
refseq.all = refseq.all[,c(1,2,7)] %>% group_by(genes) %>% summarise_all(sum)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,1] == all_spp_m[j,1],2] #fraction (2) or total count (3)
if(length(temp$V1) == 1) all_spp_m[j,i+1] = temp #fraction (V2) or total count (V1)
if(length(temp$V1) == 0) all_spp_m[j,i+1] = 0 #fraction (V2) or total count (V1)
}
sum(refseq.all[,3])
sum(refseq.all[,2])

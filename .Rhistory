end_minor_temp2 = end_minor_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
begin_major_temp = begin_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_major_temp2 = begin_major_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
end_major_temp = end_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_major_temp2 = end_major_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
fraction_begin = sum(begin_minor_temp2) / sum(begin_major_temp2 + begin_minor_temp2)
fraction_end = sum(end_minor_temp2) / sum(end_major_temp2 + end_minor_temp2)
fraction_begin
begin_minor_temp2
begin_major_temp2
begin_minor_temp2
begin_minor_temp2
end_major_temp2
end_minor_temp2
fraction_begin - fraction_end
is.na( fraction_begin - fraction_end)
s=7
temp = vcf_genotype_filter[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1],69]
temp2 = temp[as.numeric(temp)<(snp_density[s,1]+10000)]
snp_density[s,2] = length(temp2)
begin_minor_temp = begin_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_minor_temp2 = begin_minor_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
end_minor_temp = end_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_minor_temp2 = end_minor_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
begin_major_temp = begin_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_major_temp2 = begin_major_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
end_major_temp = end_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_major_temp2 = end_major_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
begin_minor_temp2
begin_major_temp2
begin_minor_temp2
end_minor_temp2
end_major_temp2
snp_density = data.frame(position = seq(0,5161246,by = 10000),density = 0)
fraction_change = data.frame(position = seq(0,5161246,by = 10000),density = 0)
for(s in 1:nrow(snp_density))
{
temp = vcf_genotype_filter[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1],69]
temp2 = temp[as.numeric(temp)<(snp_density[s,1]+10000)]
snp_density[s,2] = length(temp2)
begin_minor_temp = begin_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_minor_temp2 = begin_minor_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
end_minor_temp = end_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_minor_temp2 = end_minor_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
begin_major_temp = begin_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_major_temp2 = begin_major_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
end_major_temp = end_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_major_temp2 = end_major_temp[as.numeric(temp)<(snp_density[s,1]+10000)]
fraction_begin = sum(begin_minor_temp2) / sum(begin_major_temp2 + begin_minor_temp2)
fraction_end = sum(end_minor_temp2) / sum(end_major_temp2 + end_minor_temp2)
if(!is.na( fraction_begin - fraction_end)) fraction_change[s,2] = fraction_begin - fraction_end
snp_density[s,2] = length(temp2)
}
#snp_density
dev.new()
par(mfrow= c(3,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1)
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end
plot(x = fraction_change[,1], y = fraction_change[,2], type = "l")
plot(x = fraction_change[,1], y = fraction_change[,2], type = "")
plot(x = fraction_change[,1], y = fraction_change[,2], type = "p")
plot(x = abs(fraction_change[,1]), y = fraction_change[,2], type = "p")
plot(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")
plot(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
#snp_density
dev.new()
par(mfrow= c(3,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1)
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
plot(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
###SNP density on a window basis-----
snp_density = data.frame(position = seq(0,5161246,by = 1000),density = 0)
fraction_change = data.frame(position = seq(0,5161246,by = 1000),density = 0)
for(s in 1:nrow(snp_density))
{
temp = vcf_genotype_filter[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1],69]
temp2 = temp[as.numeric(temp)<(snp_density[s,1]+1000)]
snp_density[s,2] = length(temp2)
begin_minor_temp = begin_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_minor_temp2 = begin_minor_temp[as.numeric(temp)<(snp_density[s,1]+1000)]
end_minor_temp = end_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_minor_temp2 = end_minor_temp[as.numeric(temp)<(snp_density[s,1]+1000)]
begin_major_temp = begin_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_major_temp2 = begin_major_temp[as.numeric(temp)<(snp_density[s,1]+1000)]
end_major_temp = end_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_major_temp2 = end_major_temp[as.numeric(temp)<(snp_density[s,1]+1000)]
fraction_begin = sum(begin_minor_temp2) / sum(begin_major_temp2 + begin_minor_temp2)
fraction_end = sum(end_minor_temp2) / sum(end_major_temp2 + end_minor_temp2)
if(!is.na( fraction_begin - fraction_end)) fraction_change[s,2] = fraction_begin - fraction_end
snp_density[s,2] = length(temp2)
}
#snp_density
dev.new()
par(mfrow= c(3,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5),ylim = c(1600000,1650000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5),xlim = c(1600000,1650000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
dev.new()
par(mfrow= c(3,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5),xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
a
a =1
vcf_genotype_filter_site_location = vcf_genotype_filter[,regexpr(site_location,colnames(vcf_genotype))>0]
major_site_location =  major_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
minor_site_location = minor_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
fraction_site_location = fraction_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
samples_site_location = samples[regexpr(site_location,samples)>0]
#How many unique contigs have SNPs that I can analyse?
length(unique(sort(vcf_genotype_filter_site_location$chrom)))
dim(vcf_genotype_filter_site_location)
#order the dates and keep it as number of days.
dates = dates_intervals[regexpr(site_location,samples)>0]
ordered_dates = order(dates)
View(vcf_genotype_filter_site_location)
vcf_genotype_filter = vcf_genotype_filter[,regexpr(site_location,colnames(vcf_genotype))>0]
major_filt =  major_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
minor_filt = minor_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
fraction_filt = fraction_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
samples = samples[regexpr(site_location,samples)>0]
#order the dates and keep it as number of days.
dates_intervals = dates_intervals[regexpr(site_location,samples)>0]
begin_major = rep(0,nrow(vcf_genotype_filter))
end_major = rep(0,nrow(vcf_genotype_filter))
begin_minor = rep(0,nrow(vcf_genotype_filter))
end_minor = rep(0,nrow(vcf_genotype_filter))
for(i in 1:nrow(vcf_genotype_filter))
{
begin_major[i] = sum(major_filt[i,dates_intervals<51])
end_major[i] = sum(major_filt[i,dates_intervals>74])
begin_minor[i] = sum(minor_filt[i,dates_intervals<51])
end_minor[i] = sum(minor_filt[i,dates_intervals>74])
}
fraction_begin = begin_minor / (begin_major + begin_minor)
fraction_end = end_minor / (end_major + end_minor)
fraction_change = fraction_begin - fraction_end
#make sure the minor is really the minor...
###SNP density on a window basis-----
window = 1000
snp_density = data.frame(position = seq(0,5161246,by = window),density = 0)
fraction_change = data.frame(position = seq(0,5161246,by = window),density = 0)
for(s in 1:nrow(snp_density))
{
temp = vcf_genotype_filter[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1],69]
temp2 = temp[as.numeric(temp)<(snp_density[s,1]+window)]
snp_density[s,2] = length(temp2)
begin_minor_temp = begin_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_minor_temp2 = begin_minor_temp[as.numeric(temp)<(snp_density[s,1]+window)]
end_minor_temp = end_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_minor_temp2 = end_minor_temp[as.numeric(temp)<(snp_density[s,1]+window)]
begin_major_temp = begin_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_major_temp2 = begin_major_temp[as.numeric(temp)<(snp_density[s,1]+window)]
end_major_temp = end_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_major_temp2 = end_major_temp[as.numeric(temp)<(snp_density[s,1]+window)]
fraction_begin = sum(begin_minor_temp2) / sum(begin_major_temp2 + begin_minor_temp2)
fraction_end = sum(end_minor_temp2) / sum(end_major_temp2 + end_minor_temp2)
if(!is.na( fraction_begin - fraction_end)) fraction_change[s,2] = fraction_begin - fraction_end
snp_density[s,2] = length(temp2)
}
i
dim(major_filt)
dates_intervals
length(dates_intervals)
a
site_location
site_location = c("St1","St2","PRM")[a]
#setwd and packages and modified nls_err function
setwd("/Users/jerry/Documents/CSBQ/shapiro")
source("Rcode/factory.R")
library(vcfR)
library(qvalue)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
#load vcf and reference
vcf <- read.vcfR("results/dolicho/dolicho_genome.vcf")
dna <- ape::read.dna("results/dolicho/Dolicho_genome.fasta", format = "fasta")
#simplify names of files
samples = unlist(lapply(strsplit(colnames(vcf@gt)[-1],split = "_"), `[[`, 5))
samples = paste(samples,unlist(lapply(strsplit(colnames(vcf@gt)[-1],split = "_"), `[[`, 6)),sep = "-")
samples = gsub("Champ","",samples)
samples = gsub("-WatPhotz-RNA","",samples)
colnames(vcf@gt)[-1] = samples
#get data into a genotype matrix
vcf_genotype = as.data.frame(vcf@gt[,-1],stringsAsFactors = F)
vcf_genotype$chrom = vcf@fix[,1]
vcf_genotype$ref = vcf@fix[,4]
vcf_genotype$alt = vcf@fix[,5]
vcf_genotype$pos = vcf@fix[,2]
#allleles and fractions
minor = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
major = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
fraction = data.frame(matrix(0,nrow = nrow(vcf_genotype), ncol=length(samples)))
for(j in 1:(ncol(vcf@gt)-1))
{
vcf_genotype[,j] = unlist(lapply(strsplit(vcf_genotype[,j],split = ":"), `[[`, 3))
temp_ref = as.numeric(unlist(lapply(strsplit(vcf_genotype[,j],split = ","), `[[`, 1)))
temp_alt = as.numeric(unlist(lapply(strsplit(vcf_genotype[,j],split = ","), `[[`, 2)))
major[,j] = temp_ref
minor[,j] = temp_alt
fraction[,j] = temp_ref / (temp_ref+temp_alt)
}
###
###create a filter to remove too much misssing (50%)
###
filter = rep(0,nrow(fraction))
missing = length(samples)*0.5
maf = rep(0,nrow(fraction))
for(f in 1:length(filter))
{
if(length(c(1:length(samples))[is.na(fraction[f,])==F])>missing) filter[f] = 1
maf[f] = sum(minor[f,]) / c(sum(minor[f,]) + sum(major[f,]))
if(f %% 1000 == 0) print(paste(f," of ",length(filter)," The time is: ",Sys.time(),sep = ""))
}
###
#MAF and minor allele frequencies, Fraction of MAF and mAF
###
major_filt = major[filter ==1,]
minor_filt = minor[filter ==1,]
maf_filt = maf[filter ==1]
fraction_filt = fraction[filter ==1,]
vcf_genotype_filter = vcf_genotype[filter ==1,]
dim(vcf_genotype)
dim(vcf_genotype_filter)
#MAF filter
#I'd rather keep everything, bad SNP will get trown out during the logistic regression (pval=1)
#and removed from the qvalue correction so as not to skew the pvalue distribution on which the qvalue correction is based...
major_filt = major_filt[maf_filt <0.95,]
minor_filt = minor_filt[maf_filt <0.95,]
fraction_filt = fraction_filt[maf_filt <0.95,]
vcf_genotype_filter = vcf_genotype_filter[maf_filt <0.95,]
maf_filt = maf_filt[maf_filt <0.95]
dim(vcf_genotype)
dim(vcf_genotype_filter)
View(vcf_genotype_filter)
View(minor_filt)
#date start on 06-01, then +1 day each day...
dates_temp = colnames(vcf_genotype_filter)[1:65]
dates_temp = gsub("^....","",dates_temp)
dates_temp = ymd(as.numeric(gsub(".$","",dates_temp)))
dates_intervals = rep(0,65)
for(d in 2:65)
{
x = interval(dates_temp[1],dates_temp[d])
dates_intervals[d] = x %/% days(1)
}
#store scalar values
scalar_list = list()
#split experiment in 3 site_locations
for(a in 1:3)
{
site_location = c("St1","St2","PRM")[a]
vcf_genotype_filter_site_location = vcf_genotype_filter[,regexpr(site_location,colnames(vcf_genotype))>0]
major_site_location =  major_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
minor_site_location = minor_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
fraction_site_location = fraction_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
samples_site_location = samples[regexpr(site_location,samples)>0]
#How many unique contigs have SNPs that I can analyse?
length(unique(sort(vcf_genotype_filter_site_location$chrom)))
dim(vcf_genotype_filter_site_location)
#order the dates and keep it as number of days.
dates = dates_intervals[regexpr(site_location,samples)>0]
ordered_dates = order(dates)
#dates = gsub(".$","",colnames(vcf_genotype_filter_site_location)[1:ncol(vcf_genotype_filter_site_location)])
#dates = ymd(as.numeric(gsub("^....","",dates)))
#ordered_dates = order(dates)
#x for ordered dates
x = rep(rle(dates[ordered_dates])$values, rle(dates[ordered_dates])$lengths)
###testing the logistic regression for each SNP
scalar = rep(1,nrow(vcf_genotype_filter_site_location))
for(p in 1:nrow(vcf_genotype_filter_site_location))
#for(p in 1:10000)
{
x = x
y = t(fraction_site_location[p,ordered_dates])
if(a !=3) {
#catch error messages with nls_err
fit <- nls_err(y ~ SSlogis(x, Asym, xmid, scal), data = data.frame(x, y))
fitted = summary(fit[[1]])
if(length(fit[[1]])>0) scalar[p] = (fitted$parameters[3,4])
}
if(a == 3) {cor_temp = cor.test_err(x,y) ; if((length(cor_temp[[1]]) > 0) && !is.na(cor_temp[[1]]$p.value)) scalar[p] = cor_temp[[1]]$p.value}
if(p %% 10000 == 0) print(paste(p," of: ",nrow(vcf_genotype_filter_site_location), ", The time is: ",Sys.time(),sep = ""))
}
#fit results into a list
scalar_list[[a]] = scalar
#time check
if(a == 3) scalar_list[[3]][is.na(scalar_list[[3]])] = 1
}
write.table(scalar_list,"results/dolicho/scalar_list_genome",row.names = F, col.names = F, quote = F)
scalar_list_df = read.table("results/dolicho/scalar_list_genome",header = F)
total = nrow(scalar_list_df)
scalar_list_corrected = scalar_list_df
#qvalue correction
for(a in 1:3)
{
#qvalue correction
scalar_pvalue = scalar_list_df[scalar_list_df[,a]<0.99,a]
scalar_qvalue = qvalue(scalar_pvalue)$qvalues
#  scalar_qvalue =p.adjust(scalar_pvalue,method = "fdr")
scalar_list_corrected[scalar_list_df[,a]<0.99,a] = scalar_qvalue
}
#Overall winners (probably do a qvalue correction to appease the gods!!!!
qval = 0.05
winners_st1 = c(1:total)[(scalar_list_corrected[,1]<qval)]
winners_st2 = c(1:total)[(scalar_list_corrected[,2]<qval)]
winners_prm = c(1:total)[(scalar_list_corrected[,3]<qval)]
winners_4 = c(1:total)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval)]
winners_5 = c(1:total)[(scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
winners_6 = c(1:total)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,3]<qval)]
winners_7 = c(1:total)[(scalar_list_corrected[,1]<qval) & (scalar_list_corrected[,2]<qval) & (scalar_list_corrected[,3]<qval)]
#winners_matrix
winners = data.frame(matrix(data = 0,nrow = 9,ncol = 2))
colnames(winners) = c("SNPs","genes")
rownames(winners) = c("all","filtered","St1","St2","PRM","St1-St2","St2-PRM","St1-PRM","St1-St2-PRM")
#ALL SNPS
winners[1,1] = nrow(vcf_genotype)
winners[2,1] = nrow(vcf_genotype_filter)
winners[3,1] = length(winners_st1) - length(winners_4) - length(winners_6) - length(winners_7)
winners[4,1] = length(winners_st2) - length(winners_4) - length(winners_5) - length(winners_7)
winners[5,1] = length(winners_prm) - length(winners_5) - length(winners_6) - length(winners_7)
winners[6,1] = length(winners_4) - length(winners_7)
winners[7,1] = length(winners_5) - length(winners_7)
winners[8,1] = length(winners_6) - length(winners_7)
winners[9,1] = length(winners_7)
winners
###permutation test!!! -----
#Test the 22 in common: is it more than expected by chance? (permutation test!!!)
#1000 perm.! It is more than expected by chance
z = rep(0,10000)
for(i in 1:10000)
{
x = sample(1:total,winners[3,1]+winners[6,1]+winners[8,1]+winners[9,1]) #1493
y = sample(1:total,winners[4,1]+winners[6,1]+winners[7,1]+winners[9,1]) #4269
z = sample(1:total,winners[5,1]+winners[7,1]+winners[8,1]+winners[9,1]) #3118
temp = x[x %in% y ]
a[i] = length(temp[temp %in% z ])
}
mean(a)
a
a =1
####
####MAF before day 50 and after day 75. ----
####st1 only
site_location = c("St1","St2","PRM")[a]
vcf_genotype_filter_site_location = vcf_genotype_filter[,regexpr(site_location,colnames(vcf_genotype))>0]
major_site_location =  major_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
minor_site_location = minor_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
fraction_site_location = fraction_filt[,regexpr(site_location,colnames(vcf_genotype))>0]
samples_site_location = samples[regexpr(site_location,samples)>0]
dates = dates_intervals[regexpr(site_location,samples)>0]
begin_major = rep(0,nrow(vcf_genotype_filter_site_location))
end_major = rep(0,nrow(vcf_genotype_filter_site_location))
begin_minor = rep(0,nrow(vcf_genotype_filter_site_location))
end_minor = rep(0,nrow(vcf_genotype_filter_site_location))
for(i in 1:nrow(vcf_genotype_filter_site_location))
{
begin_major[i] = sum(major_site_location[i,dates<51])
end_major[i] = sum(major_site_location[i,dates>74])
begin_minor[i] = sum(minor_site_location[i,dates<51])
end_minor[i] = sum(minor_site_location[i,dates>74])
}
fraction_begin = begin_minor / (begin_major + begin_minor)
fraction_end = end_minor / (end_major + end_minor)
fraction_change = fraction_begin - fraction_end
#make sure the minor is really the minor...
###SNP density on a window basis-----
window = 1000
snp_density = data.frame(position = seq(0,5161246,by = window),density = 0)
fraction_change = data.frame(position = seq(0,5161246,by = window),density = 0)
for(s in 1:nrow(snp_density))
{
temp = vcf_genotype_filter[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1],69]
temp2 = temp[as.numeric(temp)<(snp_density[s,1]+window)]
snp_density[s,2] = length(temp2)
begin_minor_temp = begin_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_minor_temp2 = begin_minor_temp[as.numeric(temp)<(snp_density[s,1]+window)]
end_minor_temp = end_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_minor_temp2 = end_minor_temp[as.numeric(temp)<(snp_density[s,1]+window)]
begin_major_temp = begin_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_major_temp2 = begin_major_temp[as.numeric(temp)<(snp_density[s,1]+window)]
end_major_temp = end_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_major_temp2 = end_major_temp[as.numeric(temp)<(snp_density[s,1]+window)]
fraction_begin = sum(begin_minor_temp2) / sum(begin_major_temp2 + begin_minor_temp2)
fraction_end = sum(end_minor_temp2) / sum(end_major_temp2 + end_minor_temp2)
if(!is.na( fraction_begin - fraction_end)) fraction_change[s,2] = fraction_begin - fraction_end
snp_density[s,2] = length(temp2)
}
###
###plots
###
#should have a sliding window of SNP density.... Should probably remove SNP with MAF <0.05....
#in a circos plot?
#snp_density
dev.new()
par(mfrow= c(3,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5),xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
dev.new()
par(mfrow= c(3,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5))#,xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
par(mfrow= c(2,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5))#,xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")
plot(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")
plot(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
dim(fraction_change)
window = 10000
snp_density = data.frame(position = seq(0,5161246,by = window),density = 0)
fraction_change = data.frame(position = seq(0,5161246,by = window),density = 0)
for(s in 1:nrow(snp_density))
{
temp = vcf_genotype_filter[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1],69]
temp2 = temp[as.numeric(temp)<(snp_density[s,1]+window)]
snp_density[s,2] = length(temp2)
begin_minor_temp = begin_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_minor_temp2 = begin_minor_temp[as.numeric(temp)<(snp_density[s,1]+window)]
end_minor_temp = end_minor[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_minor_temp2 = end_minor_temp[as.numeric(temp)<(snp_density[s,1]+window)]
begin_major_temp = begin_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
begin_major_temp2 = begin_major_temp[as.numeric(temp)<(snp_density[s,1]+window)]
end_major_temp = end_major[as.numeric(vcf_genotype_filter[,69])>snp_density[s,1]]
end_major_temp2 = end_major_temp[as.numeric(temp)<(snp_density[s,1]+window)]
fraction_begin = sum(begin_minor_temp2) / sum(begin_major_temp2 + begin_minor_temp2)
fraction_end = sum(end_minor_temp2) / sum(end_major_temp2 + end_minor_temp2)
if(!is.na( fraction_begin - fraction_end)) fraction_change[s,2] = fraction_begin - fraction_end
snp_density[s,2] = length(temp2)
}
###
#snp_density
dev.new()
par(mfrow= c(2,1))
plot(snp_density,type = "l")
#winners
plot(y = rep(1,nrow(vcf_genotype_filter)),x = as.numeric(vcf_genotype_filter[,69]),col =  "darkred", pch = 1,ylim = c(0,1.5))#,xlim = c(1640000,1750000))
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.1,length(vcf_genotype_filter[winners_st1,69])),as.numeric(vcf_genotype_filter[winners_st1,69]),rep(1.15,length(vcf_genotype_filter[winners_st1,69])),col = "darkred")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.17,length(vcf_genotype_filter[winners_st2,69])),as.numeric(vcf_genotype_filter[winners_st2,69]),rep(1.22,length(vcf_genotype_filter[winners_st2,69])),col = "darkblue")
segments(lwd =0.5,as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.25,length(vcf_genotype_filter[winners_prm,69])),as.numeric(vcf_genotype_filter[winners_prm,69]),rep(1.3,length(vcf_genotype_filter[winners_prm,69])),col = "black")
segments(lwd =1,as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.32,length(vcf_genotype_filter[winners_7,69])),as.numeric(vcf_genotype_filter[winners_7,69]),rep(1.37,length(vcf_genotype_filter[winners_prm,69])),col = "black")
#fraction changes from begin to end: absolute values
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "l")
points(x = fraction_change[,1], y = abs(fraction_change[,2]), type = "p")

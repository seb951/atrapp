paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
dim(ribosoemes)
dim(ribosomes)
head(ribosomes)
(ribosomes[,6:9])
ribosomes[ribosomes[,9]>50,]
ribosomes[,9]>50
ribosomes[,9]
as.numeric(ribosomes[,9])>50
ribosomes[as.numeric(ribosomes[,9])>50,]
trimmed
head(trimmed)
ribosomes[as.numeric(ribosomes[,9])>50,]
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50[,1]
strsplit(min50[,1]),"_"_
strsplit(min50[,1]),"_")
strsplit(min50[,1],"_")
unlist(strsplit(min50[,1],"_"))
strsplit(min50[,1],"/")
unlist(strsplit(min50[,1],"/"))
unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50_n
min50_n = unlist(strsplit(min50[,1],"_merg"))[c(1,3,5)]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50_names = unlist(strsplit(min50_n[,1],"_merg"))[c(1,3,5)]
min50_names = unlist(strsplit(min50_n[,1],"_merg"))
min50_names = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50_names
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n[,1],"_merg"))
min50
min50
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n[,1],"_merg"))
unlist(strsplit(min50_n,"_merg"))
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50[,1]
min50
min50[,c(1,9)]
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50[,c(1,9)]
library(maps)
?maps
35*15*20
10500/100
10500/1000
35*20*20 / 1000
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
vignette(dada2)
library(dada2)
vignette(dada2)
vignette("dada2")
?vignette
dada2
version(dada2)
updateR(admin_password = '12coregon')
update(dada2)
update("dada2")
source("https://bioconductor.org/biocLite.R") # Installs Bionconductor
biocLite("dada2") # Installs DADA2
source("https://bioconductor.org/biocLite.R") # Installs Bionconductor
biocLite("dada2")
library(dada2)
biocLite("phyloseq")
library(phyloseq)
library(dada2)
browseVignettes("dada2")
setClass("Person", representation(name = "character", age = "numeric"))
setClass("Employee", representation(boss = "Person"), contains = "Person")
Neo <- new("Person", name="Neo", age = 31)
Neo
str(neo)
str(Neo)
?learnErrors
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/MiSeq_SOP"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master//Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
path = "Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names
fnRs
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
sample.names
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
dev.off()
dev.off()
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
?plotQualityProfile
errF <- learnErrors(filtFs, multithread=TRUE)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(240,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
fnFs
filtFs
path = "/Users/jerry/Dropbox/CSBQ/workshop/BIOME/BIOME-master/test_sequences"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample_"), `[`, 2)
sample.names
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample."), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "subsample."), `[`, 2)
dev.new()
plotQualityProfile(fnFs[1:2])
dev.new()
plotQualityProfile(fnRs[1:2])
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs[[1]]
dadaFs
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
dim(mergers)
dim(mergers[[1]])
mergers
?mergePairs
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
seqtab
dim(seqtab)
path
paste(path,"/fichier1")
paste(path,"/fichier1",sep = "")
paste(path,"/fichier1",sep = "q")
paste(path,"/fichier1",sep = "@")
paste(path,"/fichier1",sep = "")
system("mkdir dossier")
getwd()
source("https://bioconductor.org/biocLite.R")
biocLite("ShortRead")
#!/usr/local/bin/Rscript
setwd("/Users/jerry/Dropbox/CSBQ/shapiro")
#packages
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
system("ls -1 results/org_results/*RefSeq_annot_organism.tsv >all.tsv")
all.tsv = read.table("all.tsv", stringsAsFactors = F)
all_spp = NULL
samples = NULL
locations = NULL
all_spp_five = NULL
#first loop is to subset the major species (over 5%)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
all_spp = c(all_spp,refseq.all[1:10,3]) #keep only top 10
all_spp_five = c(all_spp_five,refseq.all[refseq.all[,1]>3,3]) #keep only the ones that are at more than 5%
}
all_spp_five_m = unique(sort(all_spp_five))
all_spp_m = data.frame(unique(sort(all_spp)),stringsAsFactors = F)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,3] == all_spp_m[j,1],1]
if(length(temp) == 1) all_spp_m[j,i+1] = temp
if(length(temp) == 0) all_spp_m[j,i+1] = 0
}
#get a proper shortname for the graph
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
samples = c(samples,rep(paste(date,replicate,sep = "_"),nrow(all_spp_m)))
locations = c(locations,rep(location,nrow(all_spp_m)))
}
all_spp_m_ggplot = data.frame(unlist(all_spp_m[,2:66]))
temp = all_spp_m_ggplot
all_spp_m_ggplot[,2] = rep(all_spp_m[,1],65)
all_spp_m_ggplot[,3] = samples
all_spp_m_ggplot[,4] = locations
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot$locations, levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
#top percentage according to "all_spp_five_m" vector
all_spp_m_ggplot_top12 = NULL
for(i in 1:length(all_spp_five_m))
{
all_spp_m_ggplot_top12 = rbind(all_spp_m_ggplot_top12,all_spp_m_ggplot[all_spp_m_ggplot[,2] == all_spp_five_m[i],])
}
#these are percentage values
all_spp_m_ggplot_top12[,1] = all_spp_m_ggplot_top12[,1]/100
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = "Lake Champlain - all annotated species",fill = "Taxonomy") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(length(all_spp_five_m))) +
geom_bar(aes(y = fraction, x = samples, fill = species),
data = all_spp_m_ggplot_top12,stat="identity") + ylab("fraction of annotated species")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#all three (dimensions in inches)
dev.new(width=10, height=7,noRStudioGD = TRUE)
#pdf('figures/Champlain_barplot.pdf',width=14, height=15)
p1 + facet_grid(rows=vars(locations_f))
dev.print(device=pdf, "figures/Champlain_species_barplot.pdf", onefile=FALSE)
dev.off()
####sandbox
str(all_spp_m_ggplot)
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot$locations, levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
str(all_spp_m_ggplot)
#top percentage according to "all_spp_five_m" vector
all_spp_m_ggplot_top12 = NULL
for(i in 1:length(all_spp_five_m))
{
all_spp_m_ggplot_top12 = rbind(all_spp_m_ggplot_top12,all_spp_m_ggplot[all_spp_m_ggplot[,2] == all_spp_five_m[i],])
}
#these are percentage values
all_spp_m_ggplot_top12[,1] = all_spp_m_ggplot_top12[,1]/100
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = "Lake Champlain - all annotated species",fill = "Taxonomy") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(length(all_spp_five_m))) +
geom_bar(aes(y = fraction, x = samples, fill = species),
data = all_spp_m_ggplot_top12,stat="identity") + ylab("fraction of annotated species")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#all three (dimensions in inches)
dev.new(width=10, height=7,noRStudioGD = TRUE)
#pdf('figures/Champlain_barplot.pdf',width=14, height=15)
p1 + facet_grid(rows=vars(locations_f))
dev.print(device=pdf, "figures/Champlain_species_barplot.pdf", onefile=FALSE)
dev.off()
setwd("/Users/jerry/Dropbox/CSBQ/shapiro")
#packages
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
system("ls -1 results/func_results/*annot_function.tsv >all.tsv")
all.tsv = read.table("all.tsv", stringsAsFactors = F)
all_spp = NULL
samples = NULL
locations = NULL
all_spp_five = NULL
#first loop is to subset the major species (over 1%)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
all_spp = c(all_spp,refseq.all[1:10,3]) #keep only top 10
all_spp_five = c(all_spp_five,refseq.all[refseq.all[,1]>1,3]) #keep only the ones that are at more than 1%
}
all_spp_five_m = unique(sort(all_spp_five))
all_spp_m = data.frame(unique(sort(all_spp)),stringsAsFactors = F)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
for(j in 1:nrow(all_spp_m))
{
temp = refseq.all[refseq.all[,3] == all_spp_m[j,1],1]
if(length(temp) == 1) all_spp_m[j,i+1] = temp
if(length(temp) == 0) all_spp_m[j,i+1] = 0
}
#get a proper shortname for the graph
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
samples = c(samples,rep(paste(date,replicate,sep = "_"),nrow(all_spp_m)))
locations = c(locations,rep(location,nrow(all_spp_m)))
}
all_spp_m_ggplot = data.frame(unlist(all_spp_m[,2:66]))
temp = all_spp_m_ggplot
all_spp_m_ggplot[,2] = rep(all_spp_m[,1],65)
all_spp_m_ggplot[,3] = samples
all_spp_m_ggplot[,4] = locations
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot$locations, levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot$locations, levels=c('St1','St2','PRM'))
#top percentage according to "all_spp_five_m" vector
all_spp_m_ggplot_top12 = NULL
for(i in 1:length(all_spp_five_m))
{
all_spp_m_ggplot_top12 = rbind(all_spp_m_ggplot_top12,all_spp_m_ggplot[all_spp_m_ggplot[,2] == all_spp_five_m[i],])
}
#these are percentage values
all_spp_m_ggplot_top12[,1] = all_spp_m_ggplot_top12[,1]/100
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = "Lake Champlain - all annotated species",fill = "Taxonomy") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(length(all_spp_five_m))) +
geom_bar(aes(y = fraction, x = samples, fill = species),
data = all_spp_m_ggplot_top12,stat="identity") + ylab("fraction of annotated species")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#all three (dimensions in inches)
dev.new(width=10, height=7,noRStudioGD = TRUE)
#pdf('figures/Champlain_barplot.pdf',width=14, height=15)
p1 + facet_grid(rows=vars(locations_f))
dev.print(device=pdf, "figures/Champlain_genes_barplot.pdf", onefile=FALSE)
dev.off()
str(all_spp_m_ggplot)
setwd("/Users/jerry/Dropbox/CSBQ/shapiro")
##############################-----
#########Fixing the missing data
##############################
system("ls -1 results/Subsystems_results/*tated.hierarchy.reduced >all.tsv")
all.tsv = read.table("all.tsv", stringsAsFactors = F)
#######################################
all.tsv = read.table("all.tsv", stringsAsFactors = F)
#packages
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
level = 4 #choose levels 1,2,3,4
samples = NULL
locations = NULL
all_spp = NULL
refseq.all.list = as.list(1)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(paste(all.tsv[i,1],"_modif",sep = ""),header = T,stringsAsFactors = F)
refseq.all.list[[i]] = refseq.all
#get a proper shortname for the graph
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
samples = c(samples,paste(date,replicate,sep = "_"))
locations = c(locations,location)
all_spp = c(all_spp,refseq.all[,level+2])
}
#unique.
all_spp_m = unique(sort(all_spp))
#level 4 uniques
refseq.all.uniques = data.frame(all_spp_m,stringsAsFactors = F)
for(j in 1:65)
{
for(i in 1:length(all_spp_m))
{
temp = refseq.all.list[[j]][refseq.all.list[[j]][,level+2] == all_spp_m[i],]
#summing the percentages per categories for all categories...
refseq.all.uniques[i,j+1] = sum(temp[,1])
}
}
colnames(refseq.all.uniques)[-1] = samples
#top X percent of functions
X=0.5
refseq.all.order = refseq.all.uniques[order(rowMeans(refseq.all.uniques[,-1]),decreasing=T),]
refseq.all.top1 = refseq.all.uniques[rowMeans(refseq.all.uniques[,-1])>X,]
dim(refseq.all.top1)
#ggplot object
all_spp_m_ggplot = data.frame(unlist(refseq.all.top1[,2:66]))
temp = all_spp_m_ggplot
all_spp_m_ggplot[,2] = rep(refseq.all.top1[,1],65)
all_spp_m_ggplot[,3] = as.vector(t(matrix(rep(samples,nrow(refseq.all.top1)),nrow=length(samples),ncol=nrow(refseq.all.top1))))
all_spp_m_ggplot[,4] = as.vector(t(matrix(rep(locations,nrow(refseq.all.top1)),nrow=length(locations),ncol=nrow(refseq.all.top1))))
all_spp_m_ggplot[,5] = 0
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot$locations, levels=c('St1','St2','PRM'))
#these are percentage values
all_spp_m_ggplot[,1] = all_spp_m_ggplot[,1]/100
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = "Lake Champlain - all annotated species",fill = "Taxonomy") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(nrow(refseq.all.top1))) +
geom_bar(aes(y = fraction, x = samples, fill = species),
data = all_spp_m_ggplot,stat="identity") + ylab("fraction of annotated species")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#all three (dimensions in inches)
dev.new(width=10, height=7,noRStudioGD = TRUE)
#pdf('figures/Champlain_barplot.pdf',width=14, height=15)
p1 + facet_grid(rows=vars(locations_f))
dev.print(device=pdf,paste("figures/Champlain_functions_barplot_level",level,".pdf",sep =""), onefile=FALSE)
dev.off()

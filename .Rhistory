ex3 = rbind(ex2,c(1,1,1,1,""f))
ex3 = rbind(ex2,c(1,1,1,1,"f"))
x = sample(10)
?rnorm
rnorm(1)
rnorm(2)
hist(rnorm(100))
x = rnorm(100)
y = jitter(x)
cor(x,y)
cor.test(x,y)
?cor.test
y = jitter(x,100)
cor.test(x,y)
plot(x,y)
y = jitter(x,1000)
plot(x,y)
cor.test(x,y)
z = rnorm(100,1)
hist(x)
hist(z)
hist(c(z,y,x))
z = rnorm(1000,1)
x = rnorm(1000)
y = jitter(x,1000)
hist(c(z,y,x))
hist(c(z,y,x),breaks=100)
z = rnorm(1000,4)
hist(c(z,y,x),breaks=100)
z = rnorm(1000,2)
hist(c(z,y,x),breaks=100)
t.test(z,x)
ks.test(z,x)
kruskal.test(z,x)
t.test(z,x)
t.test(z,x,y)
t.test(z,x)
n = t.test(z,x)
n
str(n)
n = lm(z~x)
n
anova(n)
mean(z)
mean(x)
stage = c(rep("a",500),rep("b",300),rep("c",200))
lm(x~y*c)
lm(x~y*stage)
anova(lm(x~y*stage))
summary(lm(x~y*stage))
hist(c(z,y,x),breaks=100)
hist(c(y,x),breaks=100)
hist(c(y,x),breaks=100,add =T)
hist(c(y,x),breaks=100,add =T)
hist(c(y,x),breaks=100,add =T)
hist(c(y,x),breaks=100,add =T)
hist(c(y,x),breaks=100)
hist(c(z),breaks=100,add =T)
hist(c(y,x),breaks=100)
hist(c(z),breaks=100,add =T,col = "red")
hist(c(z),breaks=100,add =T,col = "red")
hist(c(y,x),breaks=100,xlim = (-4,10))
hist(c(y,x),breaks=100,xlim = c(-4,10))
hist(c(z),breaks=100,add =T,col = "red")
hist(c(y,x),breaks=100,xlim = c(-4,6))
hist(c(z),breaks=100,add =T,col = "red")
t.test(x,c(yx))
t.test(x,c(y,x))
t.test(z,c(y,x))
kruskal.test(z,c(y,x))
kruskal.test(z,c(y))
t.test(z,c(y))
?kruskal.test
z = rnorm(1000,10)
t.test(z,c(y))
hist(c(y,x),breaks=100,xlim = c(-4,6))
hist(c(y,x),breaks=100,xlim = c(-4,1))
dev.new()
hist(c(y,x),breaks=100,xlim = c(-4,15))
hist(c(z),breaks=100,add =T,col = "red")
knit_with_parameters('~/Documents/protocols_documentation/plot_phylogeny_inR/phylo_plot_02_03_2018.Rmd')
420/375
375.1.1
375*1.1
375*1.12
library(DESeq2)
?DESeq2
?DESeq
getwd()
#combining figures
library(multipanelfigure)
library(magrittr)
library(dplyr)
library(DECIPHER)
library(phangorn)
library(phyloseq)
library(NJ)
?NJ
?rda
library(nlme)
?rda
library(ape)
?rda
library(vegan)
?rda
getwd()
install.packages('tinytex')
install.packages("tinytex")
librar(tinytext)
librar(tinytex)
library(tinytex)
install.packages("rticles")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='sebastien',
token='9EC11C1F1441B6D968993E601C5F854D',
secret='<SECRET>')
rsconnect::setAccountInfo(name='sebastien',
token='9EC11C1F1441B6D968993E601C5F854D',
secret='12coregon')
rsconnect::setAccountInfo(name='sebastien',
token='9EC11C1F1441B6D968993E601C5F854D',
secret='zsFPQ/7ckRkrzuaaEatBRIf0B24nXxhAM+NcY/V9')
rsconnect::deployApp('/private/var/folders/6s/zz6h_vjs7f31cy2bxcjfcfg80000gn/T/RtmpAv0Rah/file39b4c14d6bf.html')
rsconnect::deployApp()
rsconnect::deployApp("/private/var/folders/6s/zz6h_vjs7f31cy2bxcjfcfg80000gn/T/RtmpAv0Rah/")
faithful
head(faithful)
?system.file
system.file("examples/06_tabsets", package = "shiny")
system.file("examples/06_tabsets", package = "shiny")
x = read.table("/Library/Frameworks/R.framework/Versions/3.4/Resources/library/shiny/examples/06_tabsets")
?reactive
iris
?pageWithSidebar
library(shiny)
?pageWithSidebar
?reactive
server.R = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
server.R
?inputPanel
?runif
library(pals)
cols25()
(218-15)/218
17+6+8+1+8+137+4+4+7+4+3+4+10+5
(17+6+8+1+8+137+4+4+7+4+3+4+10+5)*0.78
218-170
137+4+8+8+1
137+4+8+8+1+6
knitr::opts_chunk$set(echo = TRUE)
#This is an example using include = T, message = T, warning=T, echo = T, fig.cap="Figure 1".
x = rexp(1000)
min(x)
max(x)
plot(x)
library(tinytex)
install.packages("tinytex")
head(faithful)
?density
?include_graphics
library(shiny)
?system.file
knitr::include_graphics("/Users/jerry/Dropbox/CSBQ/workshop/Rmarkdown/Rmarkdown/figures/shiny.png")
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='sebastien',token='9EC11C1F1441B6D968993E601C5F854D',secret='<SECRET>')
rsconnect::setAccountInfo(name='sebastien',
token='9EC11C1F1441B6D968993E601C5F854D',
secret='12coregon')
rsconnect::setAccountInfo(name='sebastien',
token='9EC11C1F1441B6D968993E601C5F854D',
secret='zsFPQ/7ckRkrzuaaEatBRIf0B24nXxhAM+NcY/V9')
library(ggplot2)
?facets
?facet
.libPaths()
2^8
2^9
?sliderInput
sliderInput
library(shiny)
?sliderInput
?shinyApp
getwd()
23/16
21/23
31/23
0.88*1.2
0.88*1.1
0.88*1.15
?rmarkdown
head(pressure)
knitr::opts_chunk$set(echo = TRUE)
#This is an example using include = T, message = T, warning=T, echo = T, fig.cap="Figure 1".
x = rexp(1000)
min(x)
max(x)
plot(x)
#This is an example using include = T, message = T, warning=T, echo = T, fig.cap="Figure 1".
x = rexp(1000)
min(x)
max(x)
plot(x)
install.packages("tinytex")
library(tinytex)
tinytex::install_tinytex()
library(knitr)
permanova.summary = read.table("../results/permanova.summary")
colnames(permanova.summary) = c("fungi-soil","fungi-root","bacteria-soil","bacteria-root")
kable(permanova.summary,digits =4,caption = "summary of PERMANOVAs*")
library(vegan)
?diversity
x = c(999,1000,1001,1002)
y = c(0,0.3,1,1.5)
cor(x,y)
plot(x,y)
plot(y,x)
plot(lm(x~y))
abline(lm(x~y))
plot(x,y)
plot(y,x)
abline(lm(x~y))
plot(y,x,ylim = c(999,10000))
abline(lm(x~y))
plot(y,x,ylim = c(999,10000),xlim =c(0,240))
abline(lm(x~y))
plot(y,x,ylim = c(999,2000),xlim =c(0,240))
abline(lm(x~y))
y = c(0/24,0.3/24,1/24,2/24)
plot(y,x,ylim = c(999,2000),xlim =c(0,100))
abline(lm(x~y))
plot(y,x,ylim = c(999,10000),xlim =c(0,100))
abline(lm(x~y))
plot(y,x,ylim = c(999,6000),xlim =c(0,100))
abline(lm(x~y))
#running the barplot graph
#system("./Rcode/barplots.R")
knitr::include_graphics("../figures/Champlain_genes_barplot.pdf")
pe_assembly = read.table("../results/summary_stats/pe_assembly",stringsAsFactors = F)
pe_assembly[,7] = sub("%","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub("(","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub(")","",pe_assembly[,7],fixed=T)
hist(as.numeric(pe_assembly[,7]),xlab = "% merged",main= "merging PE")
signif(mean(as.numeric(pe_assembly[,7])))
pe_assembly = read.table("../results/summary_stats/pe_assembly",stringsAsFactors = F)
pe_assembly[,7] = sub("%","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub("(","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub(")","",pe_assembly[,7],fixed=T)
hist(as.numeric(pe_assembly[,7]),xlab = "% merged",main= "merging PE")
signif(mean(as.numeric(pe_assembly[,7])),4)
pe_assembly = read.table("../results/summary_stats/pe_assembly",stringsAsFactors = F)
pe_assembly[,7] = sub("%","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub("(","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub(")","",pe_assembly[,7],fixed=T)
hist(as.numeric(pe_assembly[,7]),xlab = "% merged",main= "merging PE")
paste(signif(mean(as.numeric(pe_assembly[,7])),4)," % of sequences were trimmed",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
trimmed = read.table("../results/summary_stats/trimmed",stringsAsFactors = F)
trimmed[,9] = sub("%","",trimmed[,9],fixed=T)
trimmed[,9] = sub("(","",trimmed[,9],fixed=T)
trimmed[,9] = sub(")","",trimmed[,9],fixed=T)
hist(as.numeric(trimmed[,9]),xlab = "% dropped",main= "Trimmomatic")
paste(signif(mean(as.numeric(trimmed[,9])),4)," % of sequences were dropped",sep = "")
pe_assembly = read.table("../results/summary_stats/pe_assembly",stringsAsFactors = F)
pe_assembly[,7] = sub("%","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub("(","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub(")","",pe_assembly[,7],fixed=T)
hist(as.numeric(pe_assembly[,7]),xlab = "% merged",main= "merging PE")
paste(signif(mean(as.numeric(pe_assembly[,7])),4)," % of sequences were trimmed",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated (refseq)",sep = "")
paste(mean(refseq[,1]),": mean nb sequence annotated (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated (subsys)",sep = "")
paste(mean(subsys[,1]),": mean nb sequence annotated (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
nb_seq = 79*1000*20000
paste(nb_seq,": ~Total Number of sequence",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#(remember that here a merged sequence is composed of the 2 PEs)
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2)," :Total Number of sequences after cleaning",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),": percentage of sequences annotated (subsys)",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
hist(as.numeric(ribosomes[,9]),xlab = "% ribosomes",main = "Ribosomes")
paste(signif(mean(as.numeric(ribosomes[,9])),4)," % of sequences were ribosomes and removed",sep = "")
dim(ribosoemes)
dim(ribosomes)
head(ribosomes)
(ribosomes[,6:9])
ribosomes[ribosomes[,9]>50,]
ribosomes[,9]>50
ribosomes[,9]
as.numeric(ribosomes[,9])>50
ribosomes[as.numeric(ribosomes[,9])>50,]
trimmed
head(trimmed)
ribosomes[as.numeric(ribosomes[,9])>50,]
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50[,1]
strsplit(min50[,1]),"_"_
strsplit(min50[,1]),"_")
strsplit(min50[,1],"_")
unlist(strsplit(min50[,1],"_"))
strsplit(min50[,1],"/")
unlist(strsplit(min50[,1],"/"))
unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50_n
min50_n = unlist(strsplit(min50[,1],"_merg"))[c(1,3,5)]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50_names = unlist(strsplit(min50_n[,1],"_merg"))[c(1,3,5)]
min50_names = unlist(strsplit(min50_n[,1],"_merg"))
min50_names = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50_names
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n[,1],"_merg"))
min50
min50
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n[,1],"_merg"))
unlist(strsplit(min50_n,"_merg"))
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50[,1]
min50
min50[,c(1,9)]
print("Three samples had a high % of ribosomes removed")
min50 = ribosomes[as.numeric(ribosomes[,9])>50,]
min50_n = unlist(strsplit(min50[,1],"/"))[c(8,16,24)]
min50[,1] = unlist(strsplit(min50_n,"_merg"))[c(1,3,5)]
min50[,c(1,9)]
library(maps)
?maps
setwd("/Users/jerry/Dropbox/CSBQ/shapiro")
#blast out
blastn.out = read.table("results/Inediibacterium_ChampSt1-20160915-WatPhotz_RNAa.fasta100k.blastn.out",stringsAsFactors = F)
hist(blastn.out[,9],breaks = 1000)
dev.new(noRStudioGD = TRUE)
#par(mfrow = c(2,2))
#region1
region.1.1t = blastn.out[blastn.out[,9]>1637200,9]
region.1.2t = blastn.out[blastn.out[,9]>1637200,10]
region.1.1 = region.1.1t[region.1.1t<1638000]
region.1.1.o = region.1.1[order(region.1.2)]/1000000
region.1.2 = region.1.2t[region.1.1t<1638000]
region.1.2.o = region.1.2[order(region.1.2)]/1000000
plot(region.1.2.o,1:length(region.1.1),col = "darkblue",main = "I. massiliense",xlab = "genomic position (Mb)",yaxt ="n",ylab="",pch =20,cex =0.8)
points(region.1.1.o,1:length(region.1.1),col = "darkred",pch =20,cex =0.8)
segments(region.1.1.o,1:length(region.1.1),region.1.2.o,1:length(region.1.1),col="darkgrey")
dev.print(device=pdf, "figures/Imassiliense_genome_mapping.pdf", onefile=FALSE)
dev.off()
blastn.out = read.table("results/Inediibacterium_ChampSt1-20160915-WatPhotz_RNAa.fasta100k.blastn.out",stringsAsFactors = F)
hist(blastn.out[,9],breaks = 1000)
dev.new(noRStudioGD = TRUE)
#par(mfrow = c(2,2))
#region1
region.1.1t = blastn.out[blastn.out[,9]>1637200,9]
region.1.2t = blastn.out[blastn.out[,9]>1637200,10]
region.1.1 = region.1.1t[region.1.1t<1638000]
region.1.1.o = region.1.1[order(region.1.2t)]/1000000
region.1.2 = region.1.2t[region.1.1t<1638000]
region.1.2.o = region.1.2[order(region.1.2)]/1000000
plot(region.1.2.o,1:length(region.1.1),col = "darkblue",main = "I. massiliense",xlab = "genomic position (Mb)",yaxt ="n",ylab="",pch =20,cex =0.8)
points(region.1.1.o,1:length(region.1.1),col = "darkred",pch =20,cex =0.8)
segments(region.1.1.o,1:length(region.1.1),region.1.2.o,1:length(region.1.1),col="darkgrey")
dev.print(device=pdf, "figures/Imassiliense_genome_mapping.pdf", onefile=FALSE)
dev.off()
dev.new(noRStudioGD = TRUE,width=7,heigth=7)
#par(mfrow = c(2,2))
#region1
region.1.1t = blastn.out[blastn.out[,9]>1637200,9]
region.1.2t = blastn.out[blastn.out[,9]>1637200,10]
region.1.1 = region.1.1t[region.1.1t<1638000]
region.1.1.o = region.1.1[order(region.1.2t)]/1000000
region.1.2 = region.1.2t[region.1.1t<1638000]
region.1.2.o = region.1.2[order(region.1.2)]/1000000
plot(region.1.2.o,1:length(region.1.1),col = "darkblue",main = "I. massiliense",xlab = "genomic position (Mb)",yaxt ="n",ylab="",pch =20,cex =0.8)
points(region.1.1.o,1:length(region.1.1),col = "darkred",pch =20,cex =0.8)
segments(region.1.1.o,1:length(region.1.1),region.1.2.o,1:length(region.1.1),col="darkgrey")
dev.print(device=pdf, "figures/Imassiliense_genome_mapping.pdf", onefile=FALSE)
dev.off()

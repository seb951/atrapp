paste(min(subsys[,1]),": mininum nb sequence annotated per sample (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated per sample (subsys)",sep = "")
paste(signif(mean(subsys[,1]),4),": mean nb sequence annotated per sample (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
summary_counts = read.table("../results/summary_stats/summary_counts",stringsAsFactors = F)
nb_seq = 79*1000*20000 #rough average
nb_seq = round(sum(summary_counts[,1])/4000000000*2,4) #exact number (rough average was ~90% the same...)
paste(nb_seq,": Total Number of sequences (billions)",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#remember that here a merged sequence is composed of the 2 PEs
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2),": Total Number of sequences after cleaning (billions)",sep = "")
#What fraction of sequences are annotated
head(pe_assembly)
x = 1:5
y=1:2
cbind(x,y)
?cbind
247050/2
paste("ls -1 ",start,"/step_1_merging/*unassembled.forward.fastq >umerged.forward.files",sep = "")
start="/home/renaut/scratch/ATRAPP_Champlain_2016_Metat/samsa2_run_St2"
paste("ls -1 ",start,"/step_1_merging/*unassembled.forward.fastq >umerged.forward.files",sep = "")
start="/Users/jerry/Documents/CSBQ/shapiro/results"
###files to work with
system(paste("ls -1 ",start,"/step_1_merging/*unassembled.forward.fastq >umerged.forward.files",sep = ""))
system(paste("ls -1 ",start,"/step_1_merging/*unassembled.forward.fastq >umerged.forward.files",sep = ""))
files = read.table("umerged.forward.files",stringsAsFactors = F)
fiels
files
str(files)
nrow(files)
#grep 1st and 2rd lines
paste("awk 'NR % 2 == 1' ",files[i]," >unassembled.fastq",sep="")
i  1
i =1
#grep 1st and 2rd lines
paste("awk 'NR % 2 == 1' ",files[i]," >unassembled.fastq",sep="")
unassembled.fastq = paste("awk 'NR % 2 == 1' ",files_f[i]," >unassembled.fastq",sep="")
system(unassembled.fastq)
#grep sequences forward...
unassembled.forward.fastq = paste("awk 'NR % 2 == 0' ",files_f[i]," >unassembled.forward.fastq",sep="")
system(unassembled.forward.fastq)
#grep sequences reverse...
unassembled.reverse.fastq = paste("awk 'NR % 2 == 0' ",files_r[i]," >unassembled.reverse.fastq",sep="")
system(unassembled.reverse.fastq)
#N and E quality file
system("wc -l unassembled.reverse.fastq >wc")
wc = read.table("wc")
files_f = read.table("umerged.forward.files",stringsAsFactors = F)
files_r = read.table("umerged.forward.files",stringsAsFactors = F)
unassembled.fastq = paste("awk 'NR % 2 == 1' ",files_f[i]," >unassembled.fastq",sep="")
system(unassembled.fastq)
#grep sequences forward...
unassembled.forward.fastq = paste("awk 'NR % 2 == 0' ",files_f[i]," >unassembled.forward.fastq",sep="")
system(unassembled.forward.fastq)
#grep sequences reverse...
unassembled.reverse.fastq = paste("awk 'NR % 2 == 0' ",files_r[i]," >unassembled.reverse.fastq",sep="")
system(unassembled.reverse.fastq)
#N and E quality file
system("wc -l unassembled.reverse.fastq >wc")
wc = read.table("wc")
wc
head(c(cbind(rep('NNNNNNNNNN',wc[1,1]),rep('EEEEEEEEEE',wc[1,1]))))
head(c(rbind(rep('NNNNNNNNNN',wc[1,1]),rep('EEEEEEEEEE',wc[1,1]))))
write.table(c(rbind(rep('NNNNNNNNNN',wc[1,1]),rep('EEEEEEEEEE',wc[1,1]))),"NE_file",row.names = F, col.names = F, quote = F)
files_f
start="/Users/jerry/Documents/CSBQ/shapiro/results"
setwd(start)
system(paste("ls -1 step_1_merging/*unassembled.forward.fastq >umerged.forward.files",sep = ""))
system(paste("ls -1 /step_1_merging/*unassembled.reverse.fastq >umerged.reverse.files",sep = ""))
files_f = read.table("umerged.forward.files",stringsAsFactors = F)
files_r = read.table("umerged.forward.files",stringsAsFactors = F)
files_f
system(paste("ls -1 step_1_merging/*unassembled.forward.fastq >umerged.forward.files",sep = ""))
system(paste("ls -1 step_1_merging/*unassembled.reverse.fastq >umerged.reverse.files",sep = ""))
files_f = read.table("umerged.forward.files",stringsAsFactors = F)
files_r = read.table("umerged.forward.files",stringsAsFactors = F)
files_r
setwd(paste(start,"/step_1_merging",sep=""))
system(paste("ls -1 *unassembled.forward.fastq >umerged.forward.files",sep = ""))
system(paste("ls -1 *unassembled.reverse.fastq >umerged.reverse.files",sep = ""))
files_f = read.table("umerged.forward.files",stringsAsFactors = F)
files_r = read.table("umerged.forward.files",stringsAsFactors = F)
files_f
files_f
gsub("unassembled","cat",file_f91)
gsub("unassembled","cat",file_f[1])
gsub("unassembled","cat",files_f[1])
#grep 1st and 2rd lines
unassembled.fastq = paste("awk 'NR % 2 == 1' ",files_f[i]," >unassembled.fastq",sep="")
system(unassembled.fastq)
#grep sequences forward...
unassembled.forward.fastq = paste("awk 'NR % 2 == 0' ",files_f[i]," >unassembled.forward.fastq",sep="")
system(unassembled.forward.fastq)
#grep sequences reverse...
unassembled.reverse.fastq = paste("awk 'NR % 2 == 0' ",files_r[i]," >unassembled.reverse.fastq",sep="")
system(unassembled.reverse.fastq)
#N and E quality file
system("wc -l unassembled.reverse.fastq >wc")
wc = read.table("wc")
write.table(c(rbind(rep('NNNNNNNNNN',wc[1,1]),rep('EEEEEEEEEE',wc[1,1]))),"NE_file",row.names = F, col.names = F, quote = F)
#paste...
system("paste unassembled.forward.fastq NE_file unassembled.reverse.fastq -d'\0' >unassembled.forward.fastqN")
#put everything back
back = paste("paste -d '\n' unassembled.fastq unassembled.forward.fastqN >",gsub("unassembled","cat",files_f[1]),sep= "")
system(back)
system("paste unassembled.forward.fastq NE_file unassembled.reverse.fastq -d'\0' >unassembled.forward.fastqN")
back = paste("paste -d '\n' unassembled.fastq unassembled.forward.fastqN >",gsub("unassembled","cat",files_f[1]),sep= "")
system(back)
system(paste("ls -1 *.assembled.fastq >assembled.files",sep = ""))
files_f = read.table("umerged.forward.files",stringsAsFactors = F)
files_r = read.table("umerged.forward.files",stringsAsFactors = F)
files_a = read.table("assembled.files",stringsAsFactors = F)
files_a
all = paste("cat ",files_a," ",gsub("unassembled","cat",files_f[1])," >",gsub("unassembled","all",files_f[1]),sep = "")
all
files_f
all = paste("cat ",files_a," ",gsub("unassembled","cat",files_f[1])," >",gsub("merged.assembled","merged.assembled.all",files_a[1]),sep = "")
system(all)
system(paste("ls -1 *fastq >umerged.reverse.files",sep = ""))
files_r = read.table("umerged.forward.files",stringsAsFactors = F)
files_r
files_r = read.table("umerged.forward.files",stringsAsFactors = F)
system(paste("ls -1 *fastq >umerged.reverse.files",sep = ""))
getwd()
files_r = read.table("umerged.forward.files",stringsAsFactors = F) files_r = read.table("umerged.reverse.files",stringsAsFactors = F)
files_r = read.table("umerged.reverse.files",stringsAsFactors = F)
files_r
dim(files_r)
nrow(files_r)
files_r[i]
files_r[i,1]
files_r[2,1]
2700/30
library(ggplot2)
library(ggforce)
install.packages("ggforce")
library(ggforce)
mydata <- data.frame(A = rbinom(100, 1, 0.8),B = rbinom(100, 1, 0.7),C = rbinom(100, 1, 0.6)) %>% mutate_all(., as.logical)
library(dplyr)
mydata <- data.frame(A = rbinom(100, 1, 0.8),B = rbinom(100, 1, 0.7),C = rbinom(100, 1, 0.6)) %>% mutate_all(., as.logical)
mydata
str(mydata)
rbinom(100, 1, 0.8)
install.packages("BiocManager")
BiocManager::install("limma", version = "3.8")
BiocManager::install("limma", version = "3.8")
library(limma)
vdc <- vennCounts(mydata)
vdc
class(vdc) <- 'matrix'
df.vdc <- as.data.frame(vdc)[-1,] %>%
mutate(x = c(0, 1.2, 0.8, -1.2, -0.8, 0, 0),
y = c(1.2, -0.6, 0.5, -0.6, 0.5, -1, 0))
df.vdc
str(df.vdc)
df.venn
df.venn <- data.frame(x = c(0, 0.866, -0.866),
y = c(1, -0.5, -0.5),
labels = c('A', 'B', 'C'))
ggplot(df.venn, aes(x0 = x, y0 = y, r = 1.5, fill = labels)) +
geom_circle(alpha = .3, size = 1, colour = 'grey') +
coord_fixed() +
theme_void()
df.venn
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('A', 'B', 'C'))
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1, colour = 'grey')
####
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1) +
coord_fixed() +
theme_void() +
()
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1) +
coord_fixed() +
theme_void()
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour=c("red","blue","green")) +
coord_fixed() +
theme_void()
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="red") +
coord_fixed() +
theme_void()
####
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void()
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom')
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold'))
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
scale_colour_manual(values = c('cornflowerblue', 'firebrick', 'gold'), guide = FALSE)
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL)
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = df.vdc$x, y = df.vdc$y, label = df.vdc$Counts, size = 5)
circle.data = data.frame(x.position = c(0, 1.2, 0.8, -1.2, -0.8, 0, 0),y.position = c(1.2, -0.6, 0.5, -0.6, 0.5, -1, 0),
categories = c("hm","hf","mf","hmhf","hmmf","hfmf","hmhfmf"),counts=c(100,90,80,10,9,8,1),
counts_totals=c("110 (overexpressed: 20H / 90M)","100 (overexpressed: 20H / 80F)","89  (overexpressed: 9M / 80F)"))
####
circle.data = data.frame(x.position = c(0, 1.2, 0.8, -1.2, -0.8, 0, 0),y.position = c(1.2, -0.6, 0.5, -0.6, 0.5, -1, 0),
categories = c("hm","hf","mf","hmhf","hmmf","hfmf","hmhfmf"),counts=c(100,90,80,10,9,8,1),
counts_totals=c("110 (overexpressed: 20H / 90M)","100 (overexpressed: 20H / 80F)","89  (overexpressed: 9M / 80F)",0,0,0,0))
circle.data
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position, label = circle.data$counts, size = 5)
df.vdc
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('A', 'B', 'C'))
circle.data = data.frame(x.position = c(0, 1.2, -1.2,0.8, -0.8, 0, 0),y.position = c(1.2, -0.6,-0.6, 0.5,0.5, -1, 0),
categories = c("hm","hf","mf","hmhf","hmmf","hfmf","hmhfmf"),counts=c(100,90,80,10,9,8,1),
counts_totals=c("110 (overexpressed: 20H / 90M)","100 (overexpressed: 20H / 80F)","89  (overexpressed: 9M / 80F)",0,0,0,0))
####
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position, label = circle.data$counts, size = 5)
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('A', 'B', 'C'))
circle.data = data.frame(x.position = c(0, 1.2, -1.2,0.8, -0.8, 0, 0),y.position = c(1.2, -0.6,-0.6, 0.5,0.5, -1, 0),
categories = c("hm","hf","mf","hmhf","hmmf","hfmf","hmhfmf"),counts=c(100,90,80,10,9,8,1),
counts_totals=c("120 (overexpressed: 30H / 90M)","109 (overexpressed: 29H / 80F)","98  (overexpressed: 9M / 90F)",0,0,0,0))
####
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position, label = circle.data$counts, size = 5)
ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 5)
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 5)
venn
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('A', 'B', 'C'))
circle.data = data.frame(x.position = c(0, 1.2, -1.2,0.8, -0.8, 0, 0),y.position = c(1.6, -0.6,-0.6, 0.5,0.5, -1, 0),
categories = c("hm","hf","mf","hmhf","hmmf","hfmf","hmhfmf"),counts=c(100,90,80,10,9,8,1),
counts_totals=c("120 (overexpressed: 30H / 90M)","109 (overexpressed: 29H / 80F)","98  (overexpressed: 9M / 90F)",0,0,0,0))
####
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 5)
venn
dev.new()
venn
dev.new(width=5, height=5,noRStudioGD = TRUE)
venn
dev.print(device=pdf,"~/Desktop/venn_figure.pdf", onefile=FALSE)
dev.off()
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 3)
dev.new(width=5, height=5,noRStudioGD = TRUE)
venn
dev.print(device=pdf,"~/Desktop/venn_figure.pdf", onefile=FALSE)
dev.off()
###
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('HM', 'HF', 'MF'))
circle.data = data.frame(x.position = c(0, 1.4, -1.4,0.8, -0.8, 0, 0),y.position = c(1.6, -0.6,-0.6, 0.5,0.5, -1, 0),
categories = c("hm","hf","mf","hmhf","hmmf","hfmf","hmhfmf"),counts=c(100,90,80,10,9,8,1),
counts_totals=c("120 (overexpressed: 30H / 90M)","109 (overexpressed: 29H / 80F)","98  (overexpressed: 9M / 90F)",0,0,0,0))
####
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 3)
dev.new(width=5, height=5,noRStudioGD = TRUE)
venn
dev.print(device=pdf,"~/Desktop/venn_figure.pdf", onefile=FALSE)
dev.off()
dev.new(width=6, height=6,noRStudioGD = TRUE)
venn
dev.print(device=pdf,"~/Desktop/venn_figure.pdf", onefile=FALSE)
dev.off()
rm(list = ls())
library(ggplot2)
library(ggforce)
####ggplot + geom_circle function
#geom_circle will draw the circles, with various options to make it prettier
#annotate will add text
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 3)
#save graph as pdf on the desktop
dev.new(width=6, height=6,noRStudioGD = TRUE)
venn
dev.print(device=pdf,"~/Desktop/venn_figure.pdf", onefile=FALSE)
dev.off()
library(ggplot2)
library(ggforce)
#coordinates of the 3 circles
circle.positions <- data.frame(x = c(0, 0.866, -0.866),y = c(1, -0.5, -0.5),labels = c('HM', 'HF', 'MF'))
#data
circle.data = data.frame(x.position = c(0, 1.4, -1.4,0.8, -0.8, 0, 0),y.position = c(1.6, -0.6,-0.6, 0.5,0.5, -1, 0),
categories = c("hm","hf","mf","hmhf","hmmf","hfmf","hmhfmf"),counts=c(100,90,80,10,9,8,1),
counts_totals=c("120 (overexpressed: 30H / 90M)","109 (overexpressed: 29H / 80F)","98 (overexpressed: 9M / 90F)",0,0,0,0))
####ggplot + geom_circle function
#geom_circle will draw the circles, with various options to make it prettier
#annotate will add text
venn = ggplot(circle.positions) +
geom_circle(aes(x0 = x, y0 = y, r = 1.5, fill = labels), alpha = .3, size = 1,colour="black") +
coord_fixed() +
theme_void() +
theme(legend.position = 'bottom') +
scale_fill_manual(values = c('cornflowerblue', 'firebrick',  'gold')) +
labs(fill = NULL) +
annotate("text", x = circle.data$x.position, y = circle.data$y.position+0.2, label = circle.data$counts, size = 5) +
annotate("text", x = circle.data$x.position[1:3], y = circle.data$y.position[1:3]-0.2, label = circle.data$counts_totals[1:3], size = 3)
#save graph as pdf on the desktop
dev.new(width=6, height=6,noRStudioGD = TRUE)
venn
dev.print(device=pdf,"~/Desktop/venn_figure.pdf", onefile=FALSE)
dev.off()
getwd()
setwd("~/Documents/CSBQ/shapiro/results")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated per sample (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated per sample (refseq)",sep = "")
paste(signif(mean(refseq[,1]),4),": mean nb sequence annotated per sample (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated per sample (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated per sample (subsys)",sep = "")
paste(signif(mean(subsys[,1]),4),": mean nb sequence annotated per sample (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
summary_counts = read.table("../results/summary_stats/summary_counts",stringsAsFactors = F)
nb_seq = 79*1000*20000 #rough average
nb_seq = round(sum(summary_counts[,1])/4000000000,4) #exact number (rough average was ~90% the same...)
paste(nb_seq,": Total Number of paired-end reads (billions)",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#remember that here a merged sequence is composed of the 2 PEs
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2),": Total Number of sequences after cleaning+merging (billions)",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (subsys)",sep = "")
pe_assembly = read.table("../results/summary_stats/pe_assembly",stringsAsFactors = F)
pe_assembly[,7] = sub("%","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub("(","",pe_assembly[,7],fixed=T)
pe_assembly[,7] = sub(")","",pe_assembly[,7],fixed=T)
hist(as.numeric(pe_assembly[,7]),xlab = "% merged",main= "merging PE")
paste(signif(mean(as.numeric(pe_assembly[,7])),4)," % of sequences were merged",sep = "")
paste("Does merging make sense? Depending on size selection of amplicons sequenced (should check)")
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated per sample (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated per sample (refseq)",sep = "")
paste(signif(mean(refseq[,1]),4),": mean nb sequence annotated per sample (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated per sample (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated per sample (subsys)",sep = "")
paste(signif(mean(subsys[,1]),4),": mean nb sequence annotated per sample (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
summary_counts = read.table("../results/summary_stats/summary_counts",stringsAsFactors = F)
nb_seq = 79*1000*20000 #rough average
nb_seq = round(sum(summary_counts[,1])/4000000000,4) #exact number (rough average was ~90% the same...)
paste(nb_seq,": Total Number of paired-end reads (billions)",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#remember that here a merged sequence is composed of the 2 PEs
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2),": Total Number of sequences after cleaning+merging (billions)",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (subsys)",sep = "")
trimmed = read.table("../results/summary_stats/trimmed",stringsAsFactors = F)
trimmed[,9] = sub("%","",trimmed[,9],fixed=T)
trimmed[,9] = sub("(","",trimmed[,9],fixed=T)
trimmed[,9] = sub(")","",trimmed[,9],fixed=T)
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated per sample (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated per sample (refseq)",sep = "")
paste(signif(mean(refseq[,1]),4),": mean nb sequence annotated per sample (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated per sample (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated per sample (subsys)",sep = "")
paste(signif(mean(subsys[,1]),4),": mean nb sequence annotated per sample (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
summary_counts = read.table("../results/summary_stats/summary_counts",stringsAsFactors = F)
nb_seq = 79*1000*20000 #rough average
nb_seq = round(sum(summary_counts[,1])/4000000000,4) #exact number (rough average was ~90% the same...)
paste(nb_seq,": Total Number of paired-end reads (billions)",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#remember that here a merged sequence is composed of the 2 PEs
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2),": Total Number of sequences after cleaning+merging (billions)",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (subsys)",sep = "")
ribosomes = read.table("../results/summary_stats/ribosomes",stringsAsFactors = F)
ribosomes[,9] = sub("%","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub("(","",ribosomes[,9],fixed=T)
ribosomes[,9] = sub(")","",ribosomes[,9],fixed=T)
refseq = read.table("../results/summary_stats/refseq",stringsAsFactors = F)
subsys = read.table("../results/summary_stats/subsys",stringsAsFactors = F)
#refseq
paste(min(refseq[,1]),": mininum nb sequence annotated per sample (refseq)",sep = "")
paste(max(refseq[,1]),": maximum nb sequence annotated per sample (refseq)",sep = "")
paste(signif(mean(refseq[,1]),4),": mean nb sequence annotated per sample (refseq)",sep = "")
#subsys
paste(min(subsys[,1]),": mininum nb sequence annotated per sample (subsys)",sep = "")
paste(max(subsys[,1]),": maximum nb sequence annotated per sample (subsys)",sep = "")
paste(signif(mean(subsys[,1]),4),": mean nb sequence annotated per sample (subsys)",sep = "")
#Total Number of sequences (~20k sequences / megabyte of fastq.gz)
summary_counts = read.table("../results/summary_stats/summary_counts",stringsAsFactors = F)
nb_seq = 79*1000*20000 #rough average
nb_seq = round(sum(summary_counts[,1])/4000000000,4) #exact number (rough average was ~90% the same...)
paste(nb_seq,": Total Number of paired-end reads (billions)",sep = "")
#Total Number of sequences after cleaning (~20k sequences / megabyte of fastq.gz)
#remember that here a merged sequence is composed of the 2 PEs
nb_seq_clean = (nb_seq/2) * (mean(as.numeric(pe_assembly[,7]))/100) * (1-(mean(as.numeric(trimmed[,9]))/100)) * (1-(mean(as.numeric(ribosomes[,9]))/100))
paste(signif(nb_seq_clean,2),": Total Number of sequences after cleaning+merging (billions)",sep = "")
#What fraction of sequences are annotated
#refseq
paste(signif(sum(refseq[,1])/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum(subsys[,1])/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (subsys)",sep = "")
sum(refseq[,1])
(nb_seq_clean)
paste(signif((sum(refseq[,1])/1000000000)/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (refseq)",sep = "")
#subsys
paste(signif(sum((subsys[,1])/1000000000)/(nb_seq_clean)*100,4),"% : percentage of sequences annotated (subsys)",sep = "")
nb_seq
nb_seq_clean
sum(refseq[,1])
sum(refseq[,1])/1000000000
min(refseq[,1])
max(refseq[,1])

all_spp = NULL
all.tsv.names = NULL
samples = NULL
locations = NULL
#first get all data into giant list
for(i in 1:nrow(all.tsv))
{
refseq.list[[i]] = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
all_spp = c(all_spp,refseq.list[[i]][,3]) #keep all species
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
#get proper shortnames for the graph / samples
samples = c(samples,paste(location,date,replicate,sep = "_"))
locations = c(locations,location)
}
all_spp_unique = unique(sort(all_spp))
#don't run if don't need to...
if(file.exists("data/refseq.matrix.0.01")==F)
{
#then all data into giant data.frame
refseq.matrix = data.frame(matrix(nrow = length(all_spp_unique),ncol = length(samples)))
rownames(refseq.matrix) = all_spp_unique
colnames(refseq.matrix) = samples
for(i in 1:nrow(refseq.matrix))
{
for(j in 1:ncol(refseq.matrix))
{
temp = refseq.list[[j]][rownames(refseq.matrix)[i] == refseq.list[[j]][,3],1]
if(length(temp) ==1) refseq.matrix[i,j] = temp
}
if(i %% 1000 == 0) print(paste("Running species ",i,", The time is: ",Sys.time(),sep = ""))
}
#keep only abundant ones (mean fraction above 0.01%...)
refseq.rowMeans = rowMeans(refseq.matrix,na.rm = T)
refseq.matrix.0.01 = refseq.matrix[refseq.rowMeans>0.01,]
dim(refseq.matrix.0.01)
#get taxonomy NOW
#add family,order, phylym with taxonomy...
refseq.taxonomy = data.frame(species = rownames(refseq.matrix.0.01),genus = NA,family = NA,order = NA,phylum = NA,stringsAsFactors = F)
for(j in 1:nrow(refseq.taxonomy))
{
query = refseq.taxonomy$species[j]
query = gsub(" sp.$","",query)
if(query != "Bacteria") {
taxonomy = tax_name(query = query, get = c("genus","family","order","phylum"), db = "ncbi",messages =F)
#  if(!is.na(taxonomy$species)) taxonomy$species = tail(strsplit(taxonomy$species,split = " ")[[1]],1) #fix the species name problems...
refseq.taxonomy[j,2:5] = taxonomy[1,3:6]
}
if(j %% 5 == 0) print(paste("Running sample ",j,", The time is: ",Sys.time(),sep = ""))
Sys.sleep(1)
}
refseq.taxonomy[is.na(refseq.taxonomy[,2]),2] = "unknown"
refseq.taxonomy[is.na(refseq.taxonomy[,3]),3] = "unknown"
refseq.taxonomy[is.na(refseq.taxonomy[,4]),4] = "unknown"
refseq.taxonomy[is.na(refseq.taxonomy[,5]),5] = "unknown"
write.table(refseq.matrix.0.01,"data/refseq.matrix.0.01")
write.table(refseq.taxonomy,"data/refseq.taxonomy")
}
library(shiny)
library(taxize)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
system("ls -1 /Users/jerry/Documents/CSBQ/shapiro/results/org_results/*RefSeq_annot_organism.tsv >data/RefSeq_org.tsv")
system("ls -1 /Users/jerry/Documents/CSBQ/shapiro/results/func_results/*RefSeq_annot_function.tsv >data/RefSeq_fun.tsv")
system("ls -1 /Users/jerry/Documents/CSBQ/shapiro/results/Subsystems_results/*reduced_modif >data/Subsys.tsv")
all.tsv = read.table("data/RefSeq_org.tsv", stringsAsFactors = F)
refseq.list = list()
all_spp = NULL
all.tsv.names = NULL
samples = NULL
locations = NULL
#first get all data into giant list
for(i in 1:nrow(all.tsv))
{
refseq.list[[i]] = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
all_spp = c(all_spp,refseq.list[[i]][,3]) #keep all species
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
#get proper shortnames for the graph / samples
samples = c(samples,paste(location,date,replicate,sep = "_"))
locations = c(locations,location)
}
all_spp_unique = unique(sort(all_spp))
#don't run if don't need to...
if(file.exists("data/refseq.matrix.0.01")==F)
{
#then all data into giant data.frame
refseq.matrix = data.frame(matrix(nrow = length(all_spp_unique),ncol = length(samples)))
rownames(refseq.matrix) = all_spp_unique
colnames(refseq.matrix) = samples
for(i in 1:nrow(refseq.matrix))
{
for(j in 1:ncol(refseq.matrix))
{
temp = refseq.list[[j]][rownames(refseq.matrix)[i] == refseq.list[[j]][,3],1]
if(length(temp) ==1) refseq.matrix[i,j] = temp
}
if(i %% 1000 == 0) print(paste("Running species ",i,", The time is: ",Sys.time(),sep = ""))
}
#keep only abundant ones (mean fraction above 0.01%...)
refseq.rowMeans = rowMeans(refseq.matrix,na.rm = T)
refseq.matrix.0.01 = refseq.matrix[refseq.rowMeans>0.01,]
dim(refseq.matrix.0.01)
#get taxonomy NOW
#add family,order, phylym with taxonomy...
refseq.taxonomy = data.frame(species = rownames(refseq.matrix.0.01),genus = NA,family = NA,order = NA,phylum = NA,stringsAsFactors = F)
for(j in 1:nrow(refseq.taxonomy))
{
query = refseq.taxonomy$species[j]
query = gsub(" sp.$","",query)
if(query != "Bacteria") {
taxonomy = tax_name(query = query, get = c("genus","family","order","phylum"), db = "ncbi",messages =F)
#  if(!is.na(taxonomy$species)) taxonomy$species = tail(strsplit(taxonomy$species,split = " ")[[1]],1) #fix the species name problems...
refseq.taxonomy[j,2:5] = taxonomy[1,3:6]
}
if(j %% 5 == 0) print(paste("Running sample ",j,", The time is: ",Sys.time(),sep = ""))
Sys.sleep(1)
}
refseq.taxonomy[is.na(refseq.taxonomy[,2]),2] = "unknown"
refseq.taxonomy[is.na(refseq.taxonomy[,3]),3] = "unknown"
refseq.taxonomy[is.na(refseq.taxonomy[,4]),4] = "unknown"
refseq.taxonomy[is.na(refseq.taxonomy[,5]),5] = "unknown"
write.table(refseq.matrix.0.01,"data/refseq.matrix.0.01")
write.table(refseq.taxonomy,"data/refseq.taxonomy")
}
nrow(refseq.taxonomy)
refseq.taxonomy[is.na(refseq.taxonomy[,2]),2]
write.table(refseq.matrix.0.01,"data/refseq.matrix.0.01")
write.table(refseq.taxonomy,"data/refseq.taxonomy")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Barplots"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Input: Selector for variable to plot against mpg ----
selectInput("taxo_level", label = "Taxonomic Level:",
choices = c("species"="species","genus"="genus","family"="family","order"="order","phylum"="phylum"),selected = "genus"),
sliderInput("cutoff",
"Cut-off",
min = 0.1,
max = 5,
value = 1,step=0.1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
#load data
refseq.matrix.0.01 = read.table("/Users/jerry/Documents/CSBQ/shapiro/results/refseq.matrix.0.01",stringsAsFactors = F)
refseq.taxonomy = read.table("/Users/jerry/Documents/CSBQ/shapiro/results/refseq.taxonomy",stringsAsFactors = F)
#simplify by VARIABLE X (defined by user)
variable = c(1:5)[colnames(refseq.taxonomy) == input$taxo_level]
refseq.simplified =  refseq.matrix.0.01 %>% group_by(refseq.taxonomy[,variable]) %>% summarise_all(sum,na.rm = TRUE)
#keep only the 1%
refseq.simplified.rowMeans = rowMeans(refseq.simplified[,2:66],na.rm = T)
refseq.gg = refseq.simplified[refseq.simplified.rowMeans>input$cutoff,]
#construct ggplot2 object
all_spp_m_ggplot = data.frame(unlist(refseq.gg[,2:66]))
all_spp_m_ggplot[,2] = unlist(rep(refseq.gg[,1],65))
all_spp_m_ggplot[,3] = c(t(matrix(rep(samples,  nrow(refseq.gg)),nrow=65,ncol=nrow(refseq.gg))))
all_spp_m_ggplot[,3] = gsub("^....","",all_spp_m_ggplot[,3])
all_spp_m_ggplot[,4] = c(t(matrix(rep(locations,nrow(refseq.gg)),nrow=65,ncol=nrow(refseq.gg))))
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot[,4], levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = paste("Lake Champlain - annotated",input$taxo_level,sep = " "),fill = "Taxonomy") +
theme_bw() +
#scale_x_date(date_breaks = "months" , date_labels = "%b") +
theme(legend.text = element_text(face="italic"),plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(nrow(refseq.gg))) +
geom_bar(aes(y = fraction, x = samples, fill = species),
data = all_spp_m_ggplot,stat="identity") + ylab("fraction of annotated genera")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#PDF (dimensions in inches)
#dev.new()
p1 + facet_grid(rows=vars(locations_f))
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("Barplots"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
# Input: Selector for variable to plot against mpg ----
selectInput("taxo_level", label = "Taxonomic Level:",
choices = c("species"="species","genus"="genus","family"="family","order"="order","phylum"="phylum"),selected = "genus"),
sliderInput("cutoff",
"Cut-off",
min = 0.1,
max = 5,
value = 1,step=0.1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
#load data
refseq.matrix.0.01 = read.table("data/refseq.matrix.0.01",stringsAsFactors = F)
refseq.taxonomy = read.table("data/refseq.taxonomy",stringsAsFactors = F)
#simplify by VARIABLE X (defined by user)
variable = c(1:5)[colnames(refseq.taxonomy) == input$taxo_level]
refseq.simplified =  refseq.matrix.0.01 %>% group_by(refseq.taxonomy[,variable]) %>% summarise_all(sum,na.rm = TRUE)
#keep only the 1%
refseq.simplified.rowMeans = rowMeans(refseq.simplified[,2:66],na.rm = T)
refseq.gg = refseq.simplified[refseq.simplified.rowMeans>input$cutoff,]
#construct ggplot2 object
all_spp_m_ggplot = data.frame(unlist(refseq.gg[,2:66]))
all_spp_m_ggplot[,2] = unlist(rep(refseq.gg[,1],65))
all_spp_m_ggplot[,3] = c(t(matrix(rep(samples,  nrow(refseq.gg)),nrow=65,ncol=nrow(refseq.gg))))
all_spp_m_ggplot[,3] = gsub("^....","",all_spp_m_ggplot[,3])
all_spp_m_ggplot[,4] = c(t(matrix(rep(locations,nrow(refseq.gg)),nrow=65,ncol=nrow(refseq.gg))))
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot[,4], levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = paste("Lake Champlain - annotated",input$taxo_level,sep = " "),fill = "Taxonomy") +
theme_bw() +
#scale_x_date(date_breaks = "months" , date_labels = "%b") +
theme(legend.text = element_text(face="italic"),plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(nrow(refseq.gg))) +
geom_bar(aes(y = fraction, x = samples, fill = species),
data = all_spp_m_ggplot,stat="identity") + ylab("fraction of annotated genera")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#PDF (dimensions in inches)
#dev.new()
p1 + facet_grid(rows=vars(locations_f))
})
}
# Run the application
shinyApp(ui = ui, server = server)
samples
dim(samples)
length(samples)
length(locations)
dim(refseq.matrix.0.01)
colnames(refseq.matrix.0.01)
head(locations)
head(samples)
sapply(strsplit(colnames(refseq.matrix.0.01), "_"), "[[", 2)
sapply(strsplit(colnames(refseq.matrix.0.01), "_"), "[[", 1)
file.exists("data/refseq.matrix.0.01")
rm(list = ls())
#install.packages("shiny")
library(shiny)
library(taxize)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(dplyr,warning = F)
?library
library(dplyr,quietly = T)
?shinyApp
setwd("/Users/jerry/Documents/CSBQ/shapiro")
#packages
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
library(dplyr)
library(lubridate)
system("ls -1 results/org_results/*RefSeq_annot_organism.tsv >all.tsv")
all.tsv = read.table("all.tsv", stringsAsFactors = F)
all_spp = NULL
samples = NULL
locations = NULL
all_spp_five = NULL
#first loop is to subset the major species (over 5%)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#simplify by genus
refseq.all$genus = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all = refseq.all[,c(1,2,4)] %>% group_by(genus) %>% summarise_all(sum)
refseq.all = refseq.all[order(refseq.all$V1,decreasing =T),]
all_spp = c(all_spp,refseq.all[1:25,1]) #keep only top 10
all_spp_five = c(all_spp_five,refseq.all[refseq.all[,2]>5,1]) #keep only the ones that are at more than 5%
#all_spp = c(all_spp,refseq.all[1:10,3]) #keep only top 10
#all_spp_five = c(all_spp_five,refseq.all[refseq.all[,1]>5,3]) #keep only the ones that are at more than 5%
}
#all_spp_five_m = unique(sort(all_spp_five))
#all_spp_m = data.frame(unique(sort(all_spp)),stringsAsFactors = F)
#simplify by genus
all_spp_five_m = unique(sort(unlist(all_spp_five)))
all_spp_m = data.frame(unique(sort(unlist(all_spp))),stringsAsFactors = F)
for(i in 1:nrow(all.tsv))
{
refseq.all = read.table(all.tsv[i,1],sep = "\t",stringsAsFactors = F)
#simplify by genus
refseq.all$genus = unlist(lapply(strsplit(refseq.all[,3],split = " "), `[[`, 1))
refseq.all = refseq.all[,c(1,2,4)] %>% group_by(genus) %>% summarise_all(sum)
for(j in 1:nrow(all_spp_m))
{
#simplify by genus
temp = refseq.all[refseq.all[,1] == all_spp_m[j,1],2]
#temp = refseq.all[refseq.all[,3] == all_spp_m[j,1],1]
if(length(temp) == 1) all_spp_m[j,i+1] = temp
if(length(temp) == 0) all_spp_m[j,i+1] = 0
}
#get a proper shortname for the graph
replicate = substring(strsplit(all.tsv[i,1],split = "WatPhotz_")[[1]][2],4,4)
location = substring(strsplit(all.tsv[i,1],split = "Champ")[[1]][2],1,3)
date = strsplit(all.tsv[i,1],split = "-")[[1]][2]
samples = c(samples,rep(paste(date,replicate,sep = "_"),nrow(all_spp_m)))
locations = c(locations,rep(location,nrow(all_spp_m)))
}
all_spp_m_ggplot = data.frame(unlist(all_spp_m[,2:66]))
temp = all_spp_m_ggplot
all_spp_m_ggplot[,2] = rep(all_spp_m[,1],65)
all_spp_m_ggplot[,3] = samples
all_spp_m_ggplot[,4] = locations
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot[,4], levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
#top percentage according to "all_spp_five_m" vector
all_spp_m_ggplot_top12 = NULL
for(i in 1:length(all_spp_five_m))
{
all_spp_m_ggplot_top12 = rbind(all_spp_m_ggplot_top12,all_spp_m_ggplot[all_spp_m_ggplot[,2] == all_spp_five_m[i],])
}
#these are percentage values
all_spp_m_ggplot_top12[,1] = all_spp_m_ggplot_top12[,1]/100
#plot
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = "Lake Champlain - annotated genera",fill = "Taxonomy") +
theme_bw() +
#scale_x_date(date_breaks = "months" , date_labels = "%b") +
theme(legend.text = element_text(face="italic"),plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_fill_manual(values = x(length(all_spp_five_m))) +
geom_bar(aes(y = fraction, x = samples, fill = species),
data = all_spp_m_ggplot_top12,stat="identity") + ylab("fraction of annotated genera")  + theme(axis.text.x = element_text(angle = 90, hjust = 1))
dim(all_spp_m_ggplot)
head(all_spp_m_ggplot)
taxo_level = "genus"
cutoff = 1
input = dataframe(cutoff = 1,taxo_level = "genus" )
input = as.dataframe(cutoff = 1,taxo_level = "genus" )
input = as.data.frame(cutoff = 1,taxo_level = "genus" )
input = data.frame(cutoff = 1,taxo_level = "genus" )
input
refseq.matrix.0.01 = read.table("data/refseq.matrix.0.01",stringsAsFactors = F)
refseq.taxonomy = read.table("data/refseq.taxonomy",stringsAsFactors = F)
#simplify by VARIABLE X (defined by user)
variable = c(1:5)[colnames(refseq.taxonomy) == input$taxo_level]
refseq.simplified =  refseq.matrix.0.01 %>% group_by(refseq.taxonomy[,variable]) %>% summarise_all(sum,na.rm = TRUE)
#keep only the 1%
refseq.simplified.rowMeans = rowMeans(refseq.simplified[,2:66],na.rm = T)
refseq.gg = refseq.simplified[refseq.simplified.rowMeans>input$cutoff,]
#construct ggplot2 object
samples = colnames(refseq.matrix.0.01)
locations = sapply(strsplit(colnames(refseq.matrix.0.01), "_"), "[[", 1)
all_spp_m_ggplot = data.frame(unlist(refseq.gg[,2:66]))
all_spp_m_ggplot[,2] = unlist(rep(refseq.gg[,1],65))
all_spp_m_ggplot[,3] = c(t(matrix(rep(samples,  nrow(refseq.gg)),nrow=65,ncol=nrow(refseq.gg))))
all_spp_m_ggplot[,3] = gsub("^....","",all_spp_m_ggplot[,3])
all_spp_m_ggplot[,4] = c(t(matrix(rep(locations,nrow(refseq.gg)),nrow=65,ncol=nrow(refseq.gg))))
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot[,4], levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
getwd()
setwd("~/shiny")
setwd("/Users/jerry/Documents/CSBQ/shapiro/shiny")
refseq.matrix.0.01 = read.table("data/refseq.matrix.0.01",stringsAsFactors = F)
refseq.taxonomy = read.table("data/refseq.taxonomy",stringsAsFactors = F)
#simplify by VARIABLE X (defined by user)
variable = c(1:5)[colnames(refseq.taxonomy) == input$taxo_level]
refseq.simplified =  refseq.matrix.0.01 %>% group_by(refseq.taxonomy[,variable]) %>% summarise_all(sum,na.rm = TRUE)
#keep only the 1%
refseq.simplified.rowMeans = rowMeans(refseq.simplified[,2:66],na.rm = T)
refseq.gg = refseq.simplified[refseq.simplified.rowMeans>input$cutoff,]
#construct ggplot2 object
samples = colnames(refseq.matrix.0.01)
locations = sapply(strsplit(colnames(refseq.matrix.0.01), "_"), "[[", 1)
all_spp_m_ggplot = data.frame(unlist(refseq.gg[,2:66]))
all_spp_m_ggplot[,2] = unlist(rep(refseq.gg[,1],65))
all_spp_m_ggplot[,3] = c(t(matrix(rep(samples,  nrow(refseq.gg)),nrow=65,ncol=nrow(refseq.gg))))
all_spp_m_ggplot[,3] = gsub("^....","",all_spp_m_ggplot[,3])
all_spp_m_ggplot[,4] = c(t(matrix(rep(locations,nrow(refseq.gg)),nrow=65,ncol=nrow(refseq.gg))))
all_spp_m_ggplot[,5] = factor(all_spp_m_ggplot[,4], levels=c('St1','St2','PRM'))
colnames(all_spp_m_ggplot) = c("fraction","species","samples","locations","locations_f")
head(all_spp_m_ggplot)
library(lubridate)
all_spp_m_ggplot_top12$dates = unlist(strsplit(all_spp_m_ggplot$samples,"_"))[seq(1,(nrow(all_spp_m_ggplot_top12)*2),by = 2)]
all_spp_m_ggplot_top12$dates = ymd(all_spp_m_ggplot_top12$dates)
View(all_spp_m_ggplot_top12)
all_spp_m_ggplot$dates = unlist(strsplit(all_spp_m_ggplot$samples,"_"))[seq(1,(nrow(all_spp_m_ggplot)*2),by = 2)]
all_spp_m_ggplot$dates = ymd(all_spp_m_ggplot$dates)
head(all_spp_m_ggplot)
input
fraction = as.data.frame(all_spp_m_ggplot$fraction)
#dplyr fractions data per replicate, per location and per species
all_spp_m_ggplot.replicates_merged = fraction %>% group_by(all_spp_m_ggplot$locations,all_spp_m_ggplot$dates,all_spp_m_ggplot$species) %>% summarise_all(mean)
#add columns for FoldChanges.
all_spp_m_ggplot.replicates_merged$fold_change_mean = 0
all_spp_m_ggplot.replicates_merged$fold_change = 0
#add the locations as factors as well + give column names
all_spp_m_ggplot.replicates_merged$locations_f = 0
colnames(all_spp_m_ggplot.replicates_merged) = c("locations","dates","species","fraction","fold_change_mean","fold_change","locations_f")
all_spp_m_ggplot.replicates_merged = as.data.frame(all_spp_m_ggplot.replicates_merged)
all_spp_m_ggplot.replicates_merged$locations_f = factor(all_spp_m_ggplot.replicates_merged[,1], levels=c('St1','St2','PRM'))
####Fold change progression from Time 0 (logFC = 1)
for(i in 1: nrow(all_spp_m_ggplot))
{
#per species
temp = all_spp_m_ggplot.replicates_merged[all_spp_m_ggplot.replicates_merged$species == all_spp_m_ggplot.replicates_merged[i,3],]
#per location
temp = as.data.frame(temp)
temp2 = temp[temp$locations == all_spp_m_ggplot.replicates_merged[i,1],]
#value divided by mean value
all_spp_m_ggplot.replicates_merged$fold_change_mean[i] = log(all_spp_m_ggplot.replicates_merged[i,4] / mean(temp2[,4], na.rm =T),10)
#value divided by Time 0
all_spp_m_ggplot.replicates_merged$fold_change[i] = log(all_spp_m_ggplot.replicates_merged[i,4] / temp2[temp2[,2]=="2016-06-01",4],10)
}
#add cyano column
i
nrow(all_spp_m_ggplot)
temp = all_spp_m_ggplot.replicates_merged[all_spp_m_ggplot.replicates_merged$species == all_spp_m_ggplot.replicates_merged[i,3],]
dim(temp)
head(temp)
all_spp_m_ggplot.replicates_merged[i,3]
head(all_spp_m_ggplot.replicates_merged)
#per location
temp = as.data.frame(temp)
temp2 = temp[temp$locations == all_spp_m_ggplot.replicates_merged[i,1],]
#value divided by mean value
all_spp_m_ggplot.replicates_merged$fold_change_mean[i] = log(all_spp_m_ggplot.replicates_merged[i,4] / mean(temp2[,4], na.rm =T),10)
#value divided by Time 0
nrow(all_spp_m_ggplot)
head(all_spp_m_ggplot)
head(all_spp_m_ggplot.replicates_merged)
all_spp_m_ggplot.replicates_merged[is.na(all_spp_m_ggplot.replicates_merged),]
all_spp_m_ggplot.replicates_merged[is.na(all_spp_m_ggplot.replicates_merged[,3]),]
all_spp_m_ggplot.replicates_merged[is.na(all_spp_m_ggplot.replicates_merged[,2]),]
all_spp_m_ggplot.replicates_merged[is.na(all_spp_m_ggplot.replicates_merged[,1]),]
all_spp_m_ggplot.replicates_merged[i,1]
all_spp_m_ggplot.replicates_merged[i,]
dim(all_spp_m_ggplot.replicates_merged)
####Fold change progression from Time 0 (logFC = 1)
for(i in 1: nrow(all_spp_m_ggplot.replicates_merged))
{
#per species
temp = all_spp_m_ggplot.replicates_merged[all_spp_m_ggplot.replicates_merged$species == all_spp_m_ggplot.replicates_merged[i,3],]
#per location
temp = as.data.frame(temp)
temp2 = temp[temp$locations == all_spp_m_ggplot.replicates_merged[i,1],]
#value divided by mean value
all_spp_m_ggplot.replicates_merged$fold_change_mean[i] = log(all_spp_m_ggplot.replicates_merged[i,4] / mean(temp2[,4], na.rm =T),10)
#value divided by Time 0
all_spp_m_ggplot.replicates_merged$fold_change[i] = log(all_spp_m_ggplot.replicates_merged[i,4] / temp2[temp2[,2]=="2016-06-01",4],10)
}
#add cyano column
all_spp_m_ggplot.replicates_merged$cyano = "0"
all_spp_m_ggplot.replicates_merged$cyano[all_spp_m_ggplot.replicates_merged[,3] == "Anabaena"] = "cyano"
all_spp_m_ggplot.replicates_merged$cyano[all_spp_m_ggplot.replicates_merged[,3] == "Dolichospermum"] = "cyano"
all_spp_m_ggplot.replicates_merged$cyano[all_spp_m_ggplot.replicates_merged[,3] == "Microcystis"] = "cyano"
all_spp_m_ggplot.replicates_merged$cyano[all_spp_m_ggplot.replicates_merged[,3] == "Synechococcus"] = "cyano"
all_spp_m_ggplot.replicates_merged$cyano[all_spp_m_ggplot.replicates_merged[,3] == "Nostocales"] = "cyano"
#ggplot object
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = "Lake Champlain - annotated genera",fill = "Taxonomy") +
theme_bw() +
theme(legend.text = element_text(face="italic"),plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_colour_manual(aesthetics = "colour",values = x(length(all_spp_five_m))) +
geom_line(aes(y = fold_change, x = dates, linetype = cyano, colour = species,group=species),size = 2,data = all_spp_m_ggplot.replicates_merged,stat="identity") +
ylab("log10 Fold change since Time 0")  + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(colour="Genera (dashed = cyanobacteria)") +
scale_linetype_discrete(name="cyano",guide=F) +
scale_x_date(date_breaks = "months" , date_labels = "%b")
#PDF (dimensions in inches)
dev.new(width=10, height=7,noRStudioGD = TRUE)
p1 + facet_grid(rows=vars(locations_f))
dim(all_spp_m_ggplot.replicates_merged)
head(all_spp_m_ggplot.replicates_merged)
unique(sort(all_spp_m_ggplot.replicates_merged[,3])
)
#ggplot object
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = "Lake Champlain - annotated genera",fill = "Taxonomy") +
theme_bw() +
theme(legend.text = element_text(face="italic"),plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_colour_manual(aesthetics = "colour",values = x(unique(sort(all_spp_m_ggplot.replicates_merged[,3]))     )) +
geom_line(aes(y = fold_change, x = dates, linetype = cyano, colour = species,group=species),size = 2,data = all_spp_m_ggplot.replicates_merged,stat="identity") +
ylab("log10 Fold change since Time 0")  + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(colour="Genera (dashed = cyanobacteria)") +
scale_linetype_discrete(name="cyano",guide=F) +
scale_x_date(date_breaks = "months" , date_labels = "%b")
#PDF (dimensions in inches)
dev.new(width=10, height=7,noRStudioGD = TRUE)
p1 + facet_grid(rows=vars(locations_f))
unique(sort(all_spp_m_ggplot.replicates_merged[,3]))
length(unique(sort(all_spp_m_ggplot.replicates_merged[,3])))
x = colorRampPalette(brewer.pal(12,"Paired"))
p1=ggplot() + labs(title = "Lake Champlain - annotated genera",fill = "Taxonomy") +
theme_bw() +
theme(legend.text = element_text(face="italic"),plot.title = element_text(hjust = 0.5, size=14, face="bold")) + scale_colour_manual(aesthetics = "colour",values = x(  length(unique(sort(all_spp_m_ggplot.replicates_merged[,3])))    )) +
geom_line(aes(y = fold_change, x = dates, linetype = cyano, colour = species,group=species),size = 2,data = all_spp_m_ggplot.replicates_merged,stat="identity") +
ylab("log10 Fold change since Time 0")  + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(colour="Genera (dashed = cyanobacteria)") +
scale_linetype_discrete(name="cyano",guide=F) +
scale_x_date(date_breaks = "months" , date_labels = "%b")
#PDF (dimensions in inches)
dev.new(width=10, height=7,noRStudioGD = TRUE)
p1 + facet_grid(rows=vars(locations_f))
?shinyApp
